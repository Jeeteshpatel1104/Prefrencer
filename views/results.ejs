<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>College Preferencer</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <link rel="stylesheet" href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css">
    <!-- Add favicon here -->
    <link rel="icon" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3E%3Cpath d='M50 15 L80 45 L75 85 L25 85 L20 45 Z' fill='%234361ee'/%3E%3Ccircle cx='50' cy='45' r='14' fill='%2306d6a0'/%3E%3Ccircle cx='50' cy='70' r='8' fill='white'/%3E%3C/svg%3E" type="image/svg+xml">
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <style>
    :root {
      --primary: #4361ee;
      --primary-dark: #3a56d4;
      --secondary: #06d6a0;
      --accent: #ff6b6b;
      --light: #f8f9fa;
      --dark: #1e293b;
      --text: #334155;
      --text-light: #64748b;
      --border: #e2e8f0;
      --shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
      --transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Poppins', sans-serif;
    }

    body {
      background: linear-gradient(135deg, #f0f4f8 0%, #e6e9f0 100%);
      min-height: 100vh;
      color: var(--text);
      padding: 20px;
      position: relative;
      overflow-x: hidden;
    }

    body::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(to right, rgba(0, 0, 0, 0.03) 1px, transparent 1px),
                  linear-gradient(to bottom, rgba(0, 0, 0, 0.03) 1px, transparent 1px);
      background-size: 40px 40px;
      z-index: -1;
    }

    .decoration {
      position: absolute;
      z-index: 0;
    }

    .decoration-1 {
      top: 50px;
      right: 50px;
      width: 150px;
      height: 150px;
      border-radius: 50%;
      background: linear-gradient(135deg, var(--primary) 0%, #5e72e4 100%);
      opacity: 0.1;
    }

    .decoration-2 {
      bottom: 50px;
      left: 50px;
      width: 200px;
      height: 200px;
      border-radius: 50%;
      background: linear-gradient(135deg, var(--secondary) 0%, #06b6d4 100%);
      opacity: 0.08;
    }

    /* Header */
    header {
      background: white;
      box-shadow: var(--shadow);
      border-radius: 16px;
      max-width: 1200px;
      margin: 0 auto 30px;
      padding: 15px 30px;
    }

    .header-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
      max-width: 1200px;
      margin: 0 auto;
    }

   .header-logo {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: white;
        border-radius: 50%;
        box-shadow: var(--shadow);
        padding: 8px;
    }

    .user-info {
      display: flex;
      align-items: center;
      gap: 15px;
    }

    .user-name {
      font-weight: 500;
      color: var(--dark);
      font-size: 15px;
    }

    .logout-btn {
      background: linear-gradient(to right, var(--primary), var(--primary-dark));
      color: white;
      border: none;
      border-radius: 8px;
      padding: 8px 16px;
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      transition: var(--transition);
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .logout-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(67, 97, 238, 0.3);
    }

    /* Container */
    .container {
      max-width: 1200px;
      margin: 0 auto;
      position: relative;
      z-index: 1;
      padding: 0 20px;
    }

    .back-nav {
      margin-bottom: 30px;
    }

    .back-link {
      display: inline-flex;
      align-items: center;
      gap: 8px;
      color: var(--primary);
      font-weight: 500;
      text-decoration: none;
      padding: 8px 16px;
      border-radius: 8px;
      transition: var(--transition);
    }

    .back-link:hover {
      background: rgba(67, 97, 238, 0.1);
      transform: translateX(-5px);
    }

    /* Hero Section */
    .hero {
      text-align: center;
      margin-bottom: 30px;
      position: relative;
    }

    .hero-title {
      font-size: 2.2rem;
      font-weight: 700;
      color: var(--dark);
      margin-bottom: 10px;
      letter-spacing: -0.5px;
    }

    .hero-subtitle {
      color: var(--text-light);
      font-size: 1.1rem;
      max-width: 700px;
      margin: 0 auto 30px;
    }

    .result-summary {
      background: white;
      border-radius: 16px;
      padding: 20px;
      box-shadow: var(--shadow);
      margin-bottom: 10px;
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      justify-content: center;
    }

    .summary-card {
      background: linear-gradient(135deg, #f0f4ff 0%, #e6e9ff 100%);
      border-radius: 12px;
      padding: 15px 20px;
      text-align: center;
      min-width: 150px;
      flex: 1;
    }

    .summary-value {
      font-size: 1.8rem;
      font-weight: 700;
      color: var(--primary);
      margin: 5px 0;
    }

    .summary-label {
      font-size: 0.9rem;
      color: var(--text-light);
    }

    /* Results Table */
    .results-container {
      background: white;
      border-radius: 20px;
      box-shadow: var(--shadow);
      padding: 30px;
      margin-bottom: 40px;
      /* allow tooltips to overflow so they aren't clipped */
      overflow: visible;
      position: relative;
    }

    .table-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .results-count {
      font-weight: 600;
      color: var(--text);
    }

    .results-filter {
      display: flex;
      gap: 10px;
    }

    .filter-btn {
      background: var(--light);
      border: 1px solid var(--border);
      border-radius: 8px;
      padding: 8px 15px;
      font-size: 14px;
      cursor: pointer;
      transition: var(--transition);
    }

    .filter-btn:hover {
      background: white;
      border-color: var(--primary);
    }

    .results-table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
    }

    .results-table thead th {
      background: linear-gradient(to right, var(--primary), var(--primary-dark));
      color: white;
      font-weight: 500;
      padding: 16px 20px;
      text-align: left;
    /* Additional header + mobile table card layout for small devices */
    @media (max-width: 768px) {
      /* Keep logo + username + logout on a single line */
      .header-content { flex-direction: row; align-items: center; justify-content: space-between; }
      .header-logo { height: 34px; }
      .user-info { display: flex; align-items: center; gap: 8px; }
      .user-name { font-size: 13px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 50vw; }
      .logout-btn { padding: 6px 10px; font-size: 13px; }

  /* Convert table rows into 3-line cards for mobile readability */
  .results-table, .results-table thead, .results-table tbody, .results-table th, .results-table td, .results-table tr { display: block; width: 100%; }
  .results-table thead { display: none; }
  .results-table tbody { padding: 0; }
  .results-table tbody tr { margin-bottom: 12px; background: white; border-radius: 12px; box-shadow: var(--shadow); padding: 10px 12px; border: 1px solid var(--border); display: grid; grid-template-rows: auto auto auto; gap: 8px; grid-template-columns: 1fr; }

  /* Line 1: S.No + College name */
  .results-table tbody tr .line-1 { display: flex; gap: 8px; align-items: center; }
  .results-table tbody tr .line-1 .sno { flex: 0 0 36px; color: var(--text-light); font-weight: 600; }
  .results-table tbody tr .line-1 .college { flex: 1 1 auto; font-weight: 700; color: var(--dark); word-break: break-word; }

  /* Line 2: Institute type + Branch + Category */
  .results-table tbody tr .line-2 { display: flex; gap: 8px; align-items: center; flex-wrap: wrap; }
  .results-table tbody tr .line-2 .institute { flex: 0 0 auto; }
  .results-table tbody tr .line-2 .branch { flex: 1 1 auto; color: var(--text); }
  .results-table tbody tr .line-2 .category { flex: 0 0 auto; color: var(--text-light); }

  /* Line 3: Round + Opening + Closing */
  .results-table tbody tr .line-3 { display: flex; gap: 12px; align-items: center; justify-content: flex-start; flex-wrap: wrap; }
  .results-table tbody tr .line-3 .round, .results-table tbody tr .line-3 .opening, .results-table tbody tr .line-3 .closing { font-size: 13px; color: var(--text); }

  /* Show the mobile-card column and hide large-table cells on mobile */
  .results-table tbody tr td:not(.mobile-card) { display: none; }
  .results-table tbody tr td.mobile-card { display: block; }

  /* Tweak badges and rank containers for small screens */
  .institute-badge { font-size: 12px; padding: 5px 8px; }
  .rank-container { padding: 6px 8px; font-size: 13px; }
    }
      position: sticky;
      top: 0;
      z-index: 10;
    }

    .results-table thead th:first-child {
      border-top-left-radius: 12px;
    }

    .results-table thead th:last-child {
      border-top-right-radius: 12px;
    }

    .results-table tbody tr {
      transition: var(--transition);
      border-bottom: 1px solid var(--border);
    }

    .results-table tbody tr:last-child {
      border-bottom: none;
    }

    .results-table tbody tr:hover {
      background-color: rgba(67, 97, 238, 0.03);
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    }

    .results-table tbody td {
      padding: 16px 20px;
      color: var(--text);
    }

    .college-name {
      font-weight: 600;
      color: var(--dark);
    }

    .institute-badge {
      display: inline-block;
      padding: 4px 10px;
      border-radius: 20px;
      font-size: 12px;
      font-weight: 500;
    }

    .badge-govt {
      background: rgba(6, 214, 160, 0.15);
      color: #06a17e;
    }

    .badge-private {
      background: rgba(255, 107, 107, 0.15);
      color: #d64545;
    }

    .badge-sfi {
      background: rgba(67, 97, 238, 0.15);
      color: var(--primary);
    }

    .badge-aided {
      background: rgba(255, 171, 0, 0.15);
      color: #b37d00;
    }

    .rank-container {
      position: relative;
      cursor: pointer;
      display: inline-block;
      padding: 6px 12px;
      background: var(--light);
      border-radius: 6px;
      transition: var(--transition);
    }

    .rank-container:hover {
      background: rgba(67, 97, 238, 0.1);
    }

    .rank-tooltip {
      display: none;
      position: absolute;
      background-color: white;
      border: 1px solid var(--border);
      padding: 15px;
      font-size: 14px;
      z-index: 100;
      top: 100%;
      left: 0;
      margin-top: 8px;
      border-radius: 12px;
      box-shadow: var(--shadow);
      min-width: 200px;
      line-height: 1.6;
    }

    .rank-container:hover .rank-tooltip {
      display: block;
      animation: fadeIn 0.3s ease;
    }

    .rank-year {
      display: flex;
      justify-content: space-between;
      margin-bottom: 8px;
    }

    .rank-year:last-child {
      margin-bottom: 0;
    }

    .year-label {
      font-weight: 500;
    }

    /* Buttons */
    .actions {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-top: 30px;
      flex-wrap: wrap;
    }

    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      padding: 14px 30px;
      font-size: 16px;
      font-weight: 600;
      border-radius: 12px;
      cursor: pointer;
      transition: var(--transition);
      text-decoration: none;
      border: none;
    }

    .btn-primary {
      background: linear-gradient(to right, var(--primary), var(--primary-dark));
      color: white;
      box-shadow: 0 4px 15px rgba(67, 97, 238, 0.3);
    }

    .btn-primary:hover {
      background: linear-gradient(to right, var(--primary-dark), #2f44c0);
      transform: translateY(-3px);
      box-shadow: 0 6px 20px rgba(67, 97, 238, 0.4);
    }

    .btn-outline {
      background: transparent;
      color: var(--primary);
      border: 2px solid var(--primary);
    }

    .btn-outline:hover {
      background: rgba(67, 97, 238, 0.1);
      transform: translateY(-3px);
    }

    /* Empty State */
    .empty-state {
      text-align: center;
      padding: 50px 20px;
    }

    .empty-icon {
      font-size: 5rem;
      color: var(--text-light);
      opacity: 0.2;
      margin-bottom: 20px;
    }

    .empty-title {
      font-size: 1.8rem;
      color: var(--dark);
      margin-bottom: 15px;
      font-weight: 600;
    }

    .empty-text {
      font-size: 1.1rem;
      color: var(--text-light);
      max-width: 600px;
      margin: 0 auto 30px;
    }

    /* Animations */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    @keyframes slideIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .results-table tbody tr {
      animation: slideIn 0.4s ease forwards;
      opacity: 0;
    }

    .results-table tbody tr:nth-child(1) { animation-delay: 0.1s; }
    .results-table tbody tr:nth-child(2) { animation-delay: 0.2s; }
    .results-table tbody tr:nth-child(3) { animation-delay: 0.3s; }
    .results-table tbody tr:nth-child(4) { animation-delay: 0.4s; }
    .results-table tbody tr:nth-child(5) { animation-delay: 0.5s; }
    .results-table tbody tr:nth-child(6) { animation-delay: 0.6s; }
    .results-table tbody tr:nth-child(7) { animation-delay: 0.7s; }
    .results-table tbody tr:nth-child(8) { animation-delay: 0.8s; }
    .results-table tbody tr:nth-child(9) { animation-delay: 0.9s; }
    .results-table tbody tr:nth-child(10) { animation-delay: 1.0s; }

    /* Responsive Design */
    @media (max-width: 1024px) {
      .hero-title {
        font-size: 2rem;
      }
      
      .results-container {
        padding: 25px;
      }
    }

    @media (max-width: 768px) {
      .header-content {
        flex-direction: column;
        gap: 15px;
      }
      
      .hero-title {
        font-size: 1.8rem;
      }
      
      .result-summary {
        flex-direction: column;
      }
      
      .table-header {
        flex-direction: column;
        gap: 15px;
        align-items: flex-start;
      }
      
      .results-table {
        display: block;
        overflow-x: auto;
      }
      
      .actions {
        flex-direction: column;
        gap: 15px;
      }
      
      .btn {
        width: 100%;
      }
    }

    @media (max-width: 480px) {
      body {
        padding: 15px;
      }
      
      header {
        padding: 15px;
      }
      
      .results-container {
        padding: 20px 15px;
      }
      
      .results-table thead th,
      .results-table tbody td {
        padding: 12px 15px;
        font-size: 14px;
      }
    }
    /* Additional mobile overrides to improve fit while preserving desktop styles */
    @media (max-width: 768px) {
      header { padding: 12px 16px; border-radius: 10px; }
      .header-content { flex-direction: column; align-items: flex-start; gap: 8px; }
      .user-info { margin-top: 6px; }
      .container { padding: 0 12px; }
      .back-link { padding: 8px 10px; font-size: 14px; }
      .hero { padding: 12px 0; }
      .results-container { padding: 12px; }
      /* Make the table horizontally scrollable and improve touch scrolling */
      .results-table { display: block; width: 100%; overflow-x: auto; -webkit-overflow-scrolling: touch; }
      .results-table thead, .results-table tbody, .results-table tr, .results-table th, .results-table td { display: table-row-group; }
      .results-table td { white-space: normal; word-break: break-word; }
      .rank-tooltip { max-width: 85vw; }
      #pagination-tabs, #pagination-tabs-bottom { justify-content: center; flex-wrap: wrap; }
      .actions { display: flex; flex-direction: column; gap: 8px; }
      .btn { width: 100%; }
    }

    @media (max-width: 480px) {
      body { padding: 12px; }
      .header-logo { height: 34px; }
      .user-name { font-size: 14px; }
      .results-table { font-size: 13px; }
      .results-table tbody tr { padding: 8px 6px; }
      .back-link { font-size: 13px; padding: 6px 8px; }
      .rank-tooltip { font-size: 13px; line-height: 1.2; min-width: 160px; }
    }

    /* Mobile: show OR/CR labels and make rank-tooltip inline so it moves with the card when scrolled */
    .rank-label.mobile-only { display: none; font-weight: 700; margin-right: 6px; }
    @media (max-width: 600px) {
      .rank-label.mobile-only { display: inline-block; }
      /* Keep tooltip hidden by default (controlled by JS); make it flow in document so it moves with the card when scrolled */
      .rank-container .rank-tooltip { position: static; box-shadow: var(--shadow); border-radius: 10px; margin-top: 8px; min-width: auto; }
    }
    /* Mobile card override: present results as stacked cards and keep header in one line */
    @media (max-width: 600px) {
      .results-table { display: none !important; }
      #results-cards { display: block !important; }
      .result-card { background: #fff; border-radius: 10px; padding: 12px; box-shadow: 0 6px 18px rgba(16,24,40,0.06); margin-bottom: 12px; border: 1px solid var(--border); }
      /* Line 1: S.No + College name (name starts just after serial) */
      .result-card .line1 { display:flex; gap:8px; align-items:center; font-weight:600; color:var(--dark); }
      .result-card .line1 .sno { flex:0 0 auto; color:var(--text-light); }
      .result-card .line1 .name { flex:1 1 auto; font-weight:700; font-size:15px; word-break:break-word; white-space:normal; }
      /* Line 2: Institute type + Branch + Category (badges use same classes as desktop) */
      .result-card .line2 { display:flex; gap:8px; margin-top:8px; flex-wrap:wrap; color:var(--text); font-size:13px; align-items:center; }
      .result-card .line2 .institute-badge { font-size:12px; padding:4px 8px; }
      /* Line 3: Round + Opening + Closing. Opening/Closing are rank-containers so tooltips show previous years; font-size reduced */
      .result-card .line3 { display:flex; gap:12px; margin-top:8px; color:var(--text-light); font-size:12px; justify-content:space-between; align-items:center; }
      .result-card .rank-container { padding:6px 8px; background:var(--light); border-radius:8px; }

  /* Pagination: compress buttons to fit on a single line without a scrollbar */
  #pagination-tabs, #pagination-tabs-bottom { white-space: nowrap; overflow-x: hidden; -webkit-overflow-scrolling: touch; flex-wrap: nowrap; gap:2px; display:flex; justify-content:center; padding:0 4px; }
  #pagination-tabs button, #pagination-tabs-bottom button { display: inline-block; margin:0 2px; padding:3px 5px; min-width:26px; font-size:12px; line-height:1; border-radius:6px; }
  /* reduce active button padding slightly */
  #pagination-tabs button[style], #pagination-tabs-bottom button[style] { padding:4px 6px; }

  /* Summary: show as 2 columns (2x2) on mobile and reduce visual weight */
  .result-summary { display: grid; grid-template-columns: 1fr 1fr; gap:10px; padding: 10px; }
  .summary-card { padding: 10px 12px; border-radius: 10px; }
  .summary-value { font-size: 1.2rem; }
  .summary-label { font-size: 0.85rem; }

  /* Match index.ejs header mobile layout: single-line header with visible full name */
  .header-content { flex-direction: row !important; align-items: center !important; justify-content: space-between !important; }
  .header-logo { height: 34px !important; }
  .user-info { display:flex !important; align-items:center !important; gap:8px !important; }
  .user-name { font-size:13px !important; max-width:50vw; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
  .logout-btn { padding:6px 10px !important; font-size:13px !important; }

      /* hide big decorations and back link on mobile to reduce clutter and save vertical space */
      .decoration-1, .decoration-2, .back-nav { display: none !important; }

      /* Reduce hero subtitle size and bring results up for better first-screen view */
      .hero-subtitle { font-size: 12px !important; }
      .hero { margin-bottom: 10px; }
      .results-container { margin-top: 0; padding-top: 12px; }
    }

    /* Fixes specific very narrow devices (eg. 360px wide phones) where gutters get clipped */
    @media (max-width: 360px) {
      /* Reduce outer container padding so the white summary cards have equal left/right gutters */
      .container { padding-left: 8px; padding-right: 8px; }
      .result-summary { padding-left: 8px; padding-right: 8px; gap:8px; }
      .summary-card { padding: 8px 10px; }
      /* Ensure results container also respects small horizontal gutters */
      .results-container { padding-left: 8px; padding-right: 8px; }

      /* Tighten pagination so the first and last buttons are fully visible */
      #pagination-tabs, #pagination-tabs-bottom { padding: 0 2px; gap:2px; }
      #pagination-tabs button, #pagination-tabs-bottom button { margin:0 1px; padding:2px 4px; min-width:24px; font-size:11px; }
    }
    /* Ensure page titles and subtitles fit in one line on very narrow phones */
    @media (max-width: 360px) {
      .hero-title { font-size: 24px !important; line-height:1.05; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
      .hero-subtitle { font-size: 12px !important;  }
    }
     .footer {
            text-align: center;
            margin-top: 50px;
            padding-top: 20px;
            color: var(--text-light);
            font-size: 0.9rem;
        }



    /* Rank information note styles */
.rank-info-note {
    text-align: center;
    margin: 20px 0;
}

.rank-info-box {
    display: inline-flex;
    align-items: center;
    background: rgba(67, 97, 238, 0.08);
    padding: 12px 20px;
    border-radius: 12px;
    color: #4361ee;
    font-size: 14px;
    border-left: 4px solid #4361ee;
}

.rank-info-icon {
    font-size: 20px;
    margin-right: 10px;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .rank-info-box {
        padding: 10px 15px;
        font-size: 13px;
        flex-direction: column;
        text-align: center;
        gap: 8px;
    }
    
    .rank-info-icon {
        margin-right: 0;
        margin-bottom: 5px;
    }
}

@media (max-width: 480px) {
    .rank-info-box {
        padding: 8px 12px;
        font-size: 12px;
    }
}

/* Desktop vs Mobile helpers: show/hide appropriate info note */
.desktop-only { display: none; }
.mobile-only { display: block; }

@media (min-width: 601px) {
  .desktop-only { display: block; }
  .mobile-only { display: none; }
}

/* Ensure the info icon and text stay on same line on small screens in the mobile copy */
.rank-info-box { display: inline-flex; align-items: center; gap:10px; }
.rank-info-icon { font-size: 18px; }
.rank-info-text { display: inline-block; }

/* Collapsible state for desktop box */
#rank-info-box-desktop.collapsed .rank-info-text { display: none; }
#rank-info-box-desktop.collapsed { padding-right: 8px; }


  </style>
  <!-- Inserted: Exact CSS for Turns Pill and Upgrade Modal copied from index.ejs -->
  <style>
/* Turns Pill Enhancement */
.turns-pill {
  cursor: pointer;
  transition: var(--transition);
}

.turns-pill:hover {
  transform: scale(1.05);
}

.turns-pill {
  display: inline-flex;
  align-items: center;
  gap: 6px;
  padding: 8px 12px;
  border-radius: 999px;
  font-weight: 600;
  font-size: 14px;
  border: 1px solid var(--border);
  transition: var(--transition);
  cursor: pointer;
}

.turns-pill.zero { 
  color: #9ca3af; 
  background: #f3f4f6; 
}

.turns-pill.positive { 
  color: white; 
  background: linear-gradient(to right, var(--primary), var(--primary-dark));
  box-shadow: 0 4px 12px rgba(67, 97, 238, 0.25);
}

.turns-pill:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 16px rgba(67, 97, 238, 0.3);
}

.turns-label {
  font-size: 12px;
  opacity: 0.9;
}
@media (max-width: 768px) {
  .turns-label {
    display: none;
  }
}
  </style>
  <style>
/* Upgrade Modal Styles - Compact Version */
.upgrade-modal {
  display: none;
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.6);
  backdrop-filter: blur(5px);
  align-items: center;
  justify-content: center;
  z-index: 2000;
  padding: 15px;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.upgrade-modal.show {
  display: flex;
  opacity: 1;
}

.upgrade-modal-content {
  background: white;
  border-radius: 18px;
  padding: 25px;
  width: 100%;
  max-width: 800px;
  box-shadow: 0 20px 40px -10px rgba(0, 0, 0, 0.2);
  position: relative;
  transform: translateY(20px);
  transition: transform 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.upgrade-modal.show .upgrade-modal-content {
  transform: translateY(0);
}

.upgrade-header {
  text-align: center;
  margin-bottom: 20px;
  position: relative;
}

.upgrade-icon {
  width: 60px;
  height: 60px;
  margin: 0 auto 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
  border-radius: 50%;
  color: white;
  font-size: 26px;
}

.upgrade-header h2 {
  font-size: 24px;
  font-weight: 700;
  color: var(--dark);
  margin-bottom: 8px;
}

.upgrade-header p {
  color: var(--text-light);
  font-size: 14px;
  max-width: 500px;
  margin: 0 auto;
}

.close-modal {
  position: absolute;
  top: -10px;
  right: -10px;
  width: 36px;
  height: 36px;
  border-radius: 50%;
  background: #f1f5f9;
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  font-size: 22px;
  color: var(--text-light);
  transition: var(--transition);
}

.close-modal:hover {
  background: #e2e8f0;
  color: var(--dark);
}

.plans-container {
  position: relative;
  margin-bottom: 25px;
}

/* Desktop layout - 3 columns */
.plans-carousel {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 15px;
}

.plan-card {
  background: white;
  border-radius: 14px;
  padding: 20px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.07);
  border: 1px solid var(--border);
  position: relative;
  transition: var(--transition);
  display: flex;
  flex-direction: column;
}

.plan-card:hover {
  transform: translateY(-3px);
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
}

.plan-card.featured {
  border: 2px solid var(--primary);
  transform: scale(1.02);
  z-index: 1;
}

.plan-card.featured:hover {
  transform: scale(1.02) translateY(-3px);
}

.plan-popular-tag {
  position: absolute;
  top: -8px;
  left: 50%;
  transform: translateX(-50%);
  background: linear-gradient(to right, var(--secondary), #06b6d4);
  color: white;
  padding: 4px 12px;
  border-radius: 16px;
  font-size: 11px;
  font-weight: 600;
}

.plan-header {
  text-align: center;
  margin-bottom: 15px;
  padding-bottom: 15px;
  border-bottom: 1px solid var(--border);
}

.plan-header h3 {
  font-size: 16px;
  font-weight: 600;
  color: var(--dark);
  margin-bottom: 12px;
}

.plan-price {
  display: flex;
  align-items: baseline;
  justify-content: center;
  gap: 4px;
}

.currency {
  font-size: 18px;
  font-weight: 600;
  color: var(--primary);
}

.amount {
  font-size: 32px;
  font-weight: 700;
  color: var(--primary);
  line-height: 1;
}

.save-tag {
  background: rgba(6, 214, 160, 0.15);
  color: #06a17e;
  padding: 3px 6px;
  border-radius: 5px;
  font-size: 11px;
  font-weight: 600;
  margin-left: 6px;
}

.plan-features {
  flex-grow: 1;
  margin-bottom: 20px;
}

.feature {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
  font-size: 13px;
}

.feature i {
  color: var(--secondary);
  font-size: 16px;
  margin-right: 8px;
}

.plan-select-btn {
  background: linear-gradient(to right, var(--primary), var(--primary-dark));
  color: white;
  border: none;
  border-radius: 10px;
  padding: 10px;
  font-weight: 600;
  font-size: 14px;
  cursor: pointer;
  transition: var(--transition);
  margin-top: auto;
}

.plan-select-btn:hover {
  background: linear-gradient(to right, var(--primary-dark), #2f44c0);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(67, 97, 238, 0.3);
}

.featured-btn {
  background: linear-gradient(to right, var(--secondary), #06b6d4);
}

.featured-btn:hover {
  background: linear-gradient(to right, #06b6d4, #059bb4);
}

/* Carousel navigation dots - hidden on desktop */
.carousel-dots {
  display: none;
  justify-content: center;
  margin-top: 20px;
  gap: 10px;
}

.dot {
  width: 10px;
  height: 10px;
  border-radius: 50%;
  background: #ddd;
  cursor: pointer;
  transition: var(--transition);
}

.dot.active {
  background: var(--primary);
  transform: scale(1.2);
}

/* Carousel navigation arrows - hidden on desktop */
.carousel-arrow {
  display: none;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: white;
  border: 1px solid var(--border);
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  cursor: pointer;
  z-index: 10;
  align-items: center;
  justify-content: center;
  font-size: 20px;
  color: var(--primary);
  transition: var(--transition);
}

.carousel-arrow:hover {
  background: var(--primary);
  color: white;
}

.carousel-prev {
  left: -20px;
}

.carousel-next {
  right: -20px;
}

.upgrade-footer {
  text-align: center;
  padding-top: 15px;
  border-top: 1px solid var(--border);
}

.upgrade-footer p {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  color: var(--text-light);
  font-size: 13px;
}

.upgrade-footer i {
  color: var(--secondary);
}

/* Mobile responsive styles - IMPROVED */
@media (max-width: 900px) {
  .upgrade-modal {
    /* more top padding so floating badges have room and avoid touching viewport */
    padding: 28px 10px 18px 10px;
    align-items: flex-start;
    overflow: visible !important; /* allow badges to overflow without being clipped */
  }
  
  .upgrade-modal-content {
    margin: auto;
    max-width: 100%;
    width: 100%;
    transform: none;
    padding: 20px 15px;
    border-radius: 16px;
    overflow: visible; /* allow floating badges to show */
    z-index: 2100; /* be in front of overlay */
  }
  
  .upgrade-modal.show .upgrade-modal-content {
    transform: none;
  }
  
  /* tighten spacing under header on mobile */
  .upgrade-header { margin-bottom: 0px; }
  .upgrade-header p { margin-bottom: 0; }
  
  .plans-carousel {
    display: flex;
    overflow-x: auto;
    overflow-y: visible; /* allow badges to overflow vertically without being clipped */
    scroll-snap-type: x mandatory;
    scroll-behavior: smooth;
    -webkit-overflow-scrolling: touch;
    scroll-padding: 0 15px;
  /* reduce top padding to bring carousel closer to subtitle, while keeping badge visible */
  padding: 18px 0 10px;
    margin: 0 -15px;
    gap: 0;
  }
  
  .plan-card {
    flex: 0 0 85%;
    scroll-snap-align: center;
    margin: 0 7.5%;
    opacity: 0.7;
    transform: scale(0.95);
    transition: all 0.3s ease;
    overflow: visible; /* ensure badge isn't clipped */
  }
  
  .plan-card.active {
    opacity: 1;
    transform: scale(1);
  }
  
  .plan-card.featured {
    transform: scale(0.97);
  }
  
  .plan-card.featured.active {
    transform: scale(1);
  }
  
  /* Float the popular badge outside the card (on the boundary) and ensure it's visible */
  .plans-container { overflow: visible; padding-top: 22px; }
  .plan-card { padding-top: 24px; }
  .plan-popular-tag { z-index: 99999; top: -14px; left: 50%; transform: translateX(-50%); box-shadow: 0 8px 18px rgba(0,0,0,0.14); }
  /* Center the badge on mobile */
  .plan-popular-tag { z-index: 99999; top: -22px; left: 50%; transform: translateX(-50%); box-shadow: 0 8px 18px rgba(0,0,0,0.14); }

  /* Show carousel navigation on mobile */
  .carousel-dots {
    display: flex;
    margin-top: 15px;
  }
  
  .carousel-arrow {
    display: none !important;
  }
  
  .close-modal {
    top: 5px;
    right: 5px;
    width: 32px;
    height: 32px;
  }
}

@media (max-width: 480px) {
  .upgrade-modal-content {
    padding: 18px 12px;
  }
  
  .plan-card {
    flex: 0 0 90%;
    margin: 0 5%;
    padding: 16px;
  }
  
  .upgrade-header h2 {
    font-size: 22px;
    padding: 0 10px;
  }
  
  .upgrade-header p {
    padding: 0 5px;
  }
  
  .amount {
    font-size: 28px;
  }

  /* fine tune for very small screens: center badge, ensure spacing under it, and reduce top gap */
  .plans-container { padding-top: 14px; }
  .plan-popular-tag { top: -12px; left: 50%; transform: translateX(-50%); font-size: 12px; padding: 6px 14px; }
  .plan-card { padding-top: 22px; }
  /* slightly reduced top padding to minimize gap but keep badge visible */
  .plans-carousel { padding-top: 16px; }
}

/* Prevent body scrolling when modal is open */
body.modal-open {
  overflow: hidden;
  position: fixed;
  width: 100%;
}
  </style>
</head>
<style>
/* Small-screen override: keep info icon and text on same line for mobile */
@media (max-width: 600px) {
  .rank-info-box { flex-direction: row !important; align-items: center !important; text-align: left !important; gap: 8px; }
  .rank-info-text { display: inline !important; white-space: normal !important; }
  /* reduce hero bottom margin on small screens so the mobile note centers between summary and table */
  .hero { margin-bottom: 6px !important; }
}
</style>
<style>
/* Tweak: ensure mobile note sits visually between summary and table */
@media (max-width: 600px) {
  .rank-info-note.mobile-only { display: flex !important; justify-content: center; margin: 6px 0 6px 0; }
  .rank-info-box { padding: 8px 12px; max-width: 100%; }
}

/* Tweak: tighten gap between icon and text on desktop inline box */
@media (min-width: 601px) {
  #rank-info-box-desktop { padding: 10px 12px; }
  #rank-info-box-desktop .rank-info-icon { margin-right: 6px; }
  #rank-info-box-desktop .rank-info-text { margin-left: 2px; }
}
</style>
<style>
  /* ... your existing CSS ... */

  /* Probability indicator styles */
  .probability-indicator {
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 6px;
    border-radius: 3px 0 0 3px;
  }
  
  .probability-high {
    background: linear-gradient(to bottom, #4ade80, #16a34a);
  }
  
  .probability-medium {
    background: linear-gradient(to bottom, #fde047, #eab308);
  }
  
  .probability-low {
    background: linear-gradient(to bottom, #f87171, #dc2626);
  }
  
  .probability-unknown {
    background: linear-gradient(to bottom, #94a3b8, #64748b);
  }
  
  /* Position relative for table rows and cards */
  .results-table tbody tr {
    position: relative;
  }
  
  .result-card {
    position: relative;
    padding-left: 16px !important; /* Make space for indicator on mobile cards */
  }
  
  /* Adjust for the indicator on desktop table */
  .results-table tbody td:first-child {
    padding-left: 26px !important; /* Make space for indicator */
  }
  
  /* Mobile indicator for cards */
  .result-card .probability-indicator {
    width: 6px;
    left: 0;
    top: 0;
    bottom: 0;
    position: absolute;
    border-radius: 3px 0 0 3px;
  }
  
  /* Tooltip for probability indicator */
  .probability-tooltip {
    display: none;
    position: absolute;
    background: white;
    border: 1px solid var(--border);
    padding: 8px 12px;
    border-radius: 8px;
    box-shadow: var(--shadow);
    z-index: 100;
    font-size: 12px;
    width: max-content;
    max-width: 250px;
    left: 10px;
    top: 50%;
    transform: translateY(-50%);
  }
  
  .probability-indicator:hover + .probability-tooltip {
    display: block;
  }
  
  /* For mobile cards */
  .result-card .probability-tooltip {
    left: 16px;
    top: auto;
    bottom: 100%;
    transform: none;
    margin-bottom: 5px;
  }

  /* ... rest of your existing CSS ... */

  /* Increase probability strip width for desktop */
@media (min-width: 1025px) {
  .probability-indicator {
    width: 9px !important;
    border-radius: 4px 0 0 4px !important;
  }
  
  /* Adjust table cell padding to accommodate wider strip */
  .results-table tbody td:first-child {
    padding-left: 28px !important;
  }
}

/* Keep mobile size unchanged */
@media (max-width: 1024px) {
  .probability-indicator {
    width: 7px;
    border-radius: 3px 0 0 3px;
  }
  
  .results-table tbody td:first-child {
    padding-left: 26px !important;
  }
}


</style>
<body>
  <!-- Decorative Elements -->
  <div class="decoration decoration-1"></div>
  <div class="decoration decoration-2"></div>

  <!-- Header -->
  <header>
    <div class="header-content">
      <div class="header-logo">
        <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100">
                        <circle cx="50" cy="50" r="48" fill="#4361ee" opacity="0.1"/>
                        <path d="M50 15 L75 40 L70 75 L30 75 L25 40 Z" fill="#4361ee"/>
                        <circle cx="50" cy="35" r="12" fill="#06d6a0"/>
                        <circle cx="50" cy="60" r="7" fill="white"/>
          </svg>
      </div>
      <% if (typeof user !== 'undefined' && user) { %>
      <div style="display:flex; align-items:center; gap:12px;">
          <div class="turns-pill <%= (user.paid_turns && user.paid_turns > 0) ? 'positive' : 'zero' %>" id="turns-pill">
            <i class='bx bx-coin-stack' style="font-size:16px;color:inherit"></i>
            <span id="turns-count"><%= (user.paid_turns || 0) %></span>
            <span class="turns-label">Turns</span>
          </div>
          <div class="user-info">
      <% } else { %>
      <div class="user-info">
      <% } %>
        <% if (typeof user !== 'undefined' && user) { %>
          <span class="user-name"><%= user.name || user.displayName || user.email %></span>
          <a href="/logout" class="logout-btn"><i class='bx bx-log-out'></i> Logout</a>
        <% } else { %>
          <a href="/login" class="logout-btn"><i class='bx bx-log-in'></i> Login</a>
        <% } %>
  </div>
    </div>
  </header>

  <!-- Main Container -->
  <div class="container">
    <!-- Back Navigation -->
      <div class="back-nav">
      <a href="#" id="back-to-search" class="back-link">
        <i class='bx bx-arrow-back'></i> Back to Search
      </a>
    </div>

    <!-- Hero Section -->
    <div class="hero">
      <h1 class="hero-title">College Search Results</h1>
      <p class="hero-subtitle">
  Based on your JEE Mains Rank: <%= search && search.rank ? search.rank : 'N/A' %>
  | Category: <%= search && search.selectedCaste ? search.selectedCaste : 'N/A' %>
  | Domicile: <%= search && search.domicile ? (search.domicile === 'Y' ? 'MP Resident' : (search.domicile === 'AI' ? 'ALL India' : search.domicile)) : 'N/A' %>
      </p>
      
      <div class="result-summary">
        <% 
          const total = results ? results.length : 0;
          let govt = 0, Sfi = 0, aided = 0, priv = 0;
          if (results && Array.isArray(results)) {
            results.forEach(r => {
              const t = (r.institute_type || '').toUpperCase();
              if (t.includes('GOVT')) govt++;
              else if (t.includes('S.F.I')) Sfi++;
              else if (t.includes('AIDED')) aided++;
              else priv++;
            });
          }
          const userRank = search && search.rank ? Number(search.rank) : null;
          let betterCount = 0;
          if (userRank && results && Array.isArray(results)) {
            results.forEach(r => {
              const c = Number(r.closing_rank_2024 || r.closing_rank || 0);
              if (c > userRank) betterCount++;
            });
          }
          const percent = total > 0 && userRank ? Math.round((betterCount / total) * 100) : 0;
        %>
        <div class="summary-card">
          <div class="summary-value"><%= total %></div>
          <div class="summary-label">Total Entries</div>
        </div>
        <div class="summary-card">
          <div class="summary-value"><%= govt %> / <%= Sfi %></div>
          <div class="summary-label">Govt / S.F.I. college entries</div>
        </div>
        <div class="summary-card">
          <div class="summary-value"><%= aided %> / <%= priv %></div>
          <div class="summary-label">Govt Aided / Private college entries</div>
        </div>
        <div class="summary-card">
          <div class="summary-value"><%= percent %>%</div>
          <div class="summary-label">Chance (%) (closing rank &gt; your rank)</div>
        </div>
      </div>
    </div>
        <!-- Note about rank hover information (mobile-only: kept above results for small screens) -->
        <div class="rank-info-note mobile-only" style="margin-bottom:27px;">
          <div class="rank-info-box">
            <i class='bx bx-info-circle rank-info-icon' aria-hidden="true"></i>
            <span class="rank-info-text">Click on <strong>Opening Rank(OR)</strong>, <strong>Closing Rank(CR)</strong>, or the <strong>color strip</strong> to view past cutoffs or probabilities.</span>
          </div>
        </div>

    <!-- Results Container -->
    <div class="results-container">
      <div class="table-header">
         <div class="results-count" id="results-count">Showing <%= results && results.length ? results.length : 0 %> entries</div>
      </div>
      <div class="pagination-info-row" style="margin-bottom:12px; display:flex; gap:8px; align-items:center; justify-content:space-between;">
        <div id="pagination-tabs" style="display:flex; gap:8px; flex-wrap:wrap; align-items:center;"></div>
        <!-- Desktop-only rank info: shown inline with pagination; has a toggle on the info icon -->
        <div class="rank-info-note desktop-only" style="margin-left:12px;">
          <div class="rank-info-box" id="rank-info-box-desktop">
            <i class='bx bx-info-circle rank-info-icon' id="rank-info-toggle" title="Toggle rank info" style="cursor:pointer;" aria-hidden="true"></i>
            <span class="rank-info-text">Hover on <strong>OR</strong>, <strong>CR</strong>, or the <strong>color strip</strong> to view past cutoffs or probabilities.</span>
          </div>
        </div>
      </div>
      
  <table class="results-table">
        <thead>
          <tr>
            <th>S.No</th>
            <th>College Name</th>
            <th>Institute Type</th>
            <th>Branch</th>
            <th>Category</th>
            <th>Round</th>
            <th>Opening Rank (OR)</th>
            <th>Closing Rank (CR)</th>
          </tr>
        </thead>
        <tbody id="results-tbody">
          <!-- Rendered by client-side pagination script -->
        </tbody>
      </table>
  <div id="results-cards" style="display:none; margin-top:12px;"></div>
  <div id="pagination-tabs-bottom" style="margin-top:12px; display:flex; gap:8px; flex-wrap:wrap; align-items:center; justify-content:center;"></div>
    </div>

    <!-- Actions -->
    <div class="actions">
      <a href="#" id="search-again" class="btn btn-outline">
        <i class='bx bx-search-alt'></i> Search Again
      </a>
    </div>
    <div class="footer">
            <p>&copy; 2025 College Preferencer. All rights reserved.</p>
    </div>
  </div>

  <script type="application/json" id="server-data">
    <%- JSON.stringify({
      results: typeof results !== 'undefined' ? results : [],
      search: typeof search !== 'undefined' ? search : {},
      user: typeof user !== 'undefined' ? user : null,
      turnsBeforeSearch: typeof turnsBeforeSearch !== 'undefined' ? turnsBeforeSearch : 0,
      paidSearchConsumed: typeof paidSearchConsumed !== 'undefined' ? paidSearchConsumed : false
    }) %>
  </script>

  <script>

// Client-side rendering, floating tooltip, and synchronized pagination (top + bottom)
  document.addEventListener('DOMContentLoaded', function() {
    const serverData = JSON.parse(document.getElementById('server-data').textContent);
    const RAW_RESULTS = serverData.results;
    const search = serverData.search;
    const user = serverData.user;
    // Store turns values - BEFORE search and AFTER search
    window.__USER_PAID_BEFORE_SEARCH = serverData.turnsBeforeSearch;
    window.__USER_PAID_AFTER_SEARCH = user && typeof user.paid_turns !== 'undefined' ? user.paid_turns : 0;
    window.__PAID_CONSUMED = serverData.paidSearchConsumed;


  // DO NOT persist authoritative value in localStorage. Fetch authoritative paid turns from server on load.
  (async function(){
    try {
      const resp = await fetch('/user/paid-turns', { method: 'GET', credentials: 'same-origin' });
      if (resp.ok) {
        const data = await resp.json();
        const val = Number(data.paid_turns || 0);
        window.__USER_PAID_AFTER_SEARCH = val;
        window.__USER_PAID = val;
      }
    } catch (e) { /* ignore and fall back to server-rendered value */ }
    // reflect pill style based on loaded value
// reflect pill style based on initial value
// reflect pill style based on initial value
try {
    const pill = document.getElementById('turns-count');
    const parent = document.getElementById('turns-pill');
    if (pill && parent) {
        pill.textContent = getUserPaid();
        parent.classList.toggle('positive', getUserPaid() > 0);
        parent.classList.toggle('zero', getUserPaid() <= 0);
    }
} catch(e) {}
})();
  // No client-side snapshot used. Authoritative paid turns are fetched from server on load / notification.
  const PAID_CONSUMED = serverData.paidSearchConsumed;
  function getUserPaid(){ return (typeof window.__USER_PAID !== 'undefined') ? Number(window.__USER_PAID) : 0; }
  // reflect pill style based on initial value

      const PER_PAGE = 70;
      let currentPage = 1;

      const tbody = document.getElementById('results-tbody');
      const paginationTop = document.getElementById('pagination-tabs');
      const paginationBottom = document.getElementById('pagination-tabs-bottom');
      const resultsCountEl = document.getElementById('results-count');
      const table = document.querySelector('.results-table');
  const resultsContainer = document.querySelector('.results-container');

      resultsCountEl.textContent = `Showing ${RAW_RESULTS.length} entries`;

      function createBadge(type) {
        const t = (type || '').toUpperCase();
        if (t.includes('GOVT')) return '<span class="institute-badge badge-govt">GOVT</span>';
        if (t.includes('S.F.I')) return '<span class="institute-badge badge-sfi">S.F.I.</span>';
        if (t.includes('AIDED')) return '<span class="institute-badge badge-aided">AIDED</span>';
        return '<span class="institute-badge badge-private">PRIVATE</span>';
      }

      // Locked UI styles (injected here so we don't change layout elsewhere)
      const style = document.createElement('style');
      style.textContent = `
        .locked-row td { color: #9ca3af; background: #f8fafc; position:relative; }
        /* allow clicks to pass to upgrade button inside overlay */
        .locked-row .lock-overlay { position:absolute; inset:0; background: rgba(255,255,255,0.85); display:flex; align-items:center; justify-content:center; gap:10px; pointer-events: none; }
        .locked-card { filter: grayscale(40%); opacity:0.85; position:relative; }
        .locked-card .lock-overlay { position:absolute; inset:0; display:flex; align-items:center; justify-content:center; background: rgba(255,255,255,0.85); border-radius:12px; pointer-events: none; }
        .lock-overlay .upgrade-cta { pointer-events: auto; }
        .upgrade-cta { background: linear-gradient(to right, var(--primary), var(--primary-dark)); color:white; border:none; padding:8px 12px; border-radius:8px; cursor:pointer; }
        .search-toast {
          position: fixed;
          top: 88px;
          right: 16px;
          background: linear-gradient(to right, var(--primary), var(--primary-dark));
          color: #fff;
          padding: 10px 14px;
          border-radius: 999px;
          box-shadow: var(--shadow);
          z-index: 2000;
          display: flex;
          align-items: center;
          gap: 8px;
          font-weight: 600;
          letter-spacing: .2px;
          animation: toast-in .25s ease-out;
        }
        .search-toast i { font-size: 18px; line-height: 1; }
        @keyframes toast-in { from { opacity: 0; transform: translateY(-6px); } to { opacity: 1; transform: none; } }
      `;
      document.head.appendChild(style);

      // Helper to show a consistent turn-consumed toast
      function showTurnConsumedToast(message) {
        try {
          const toast = document.createElement('div');
          toast.className = 'search-toast';
          toast.innerHTML = "<i class='bx bx-check-circle'></i><span>" + (message || '1 turn consumed') + "</span>";
          document.body.appendChild(toast);
          setTimeout(() => toast.remove(), 4000);
        } catch (e) {}
      }

      // Add probability calculation function (moved here so renderRow/renderCard can use it)
      function calculateProbability(userRank, result) {
        const cutoffs = [
          result.closing_rank_2024,
          result.closing_rank_2023,
          result.closing_rank_2022
        ].filter(rank => rank && rank !== 'N/A' && !isNaN(Number(rank))).map(Number);

        if (cutoffs.length === 0) return 'unknown';

        let betterCount = 0;
        let worseCount = 0;
        cutoffs.forEach(cutoff => {
          if (userRank && Number(userRank) < cutoff) betterCount++;
          else worseCount++;
        });

        if (betterCount === cutoffs.length) return 'high';
        if (worseCount === cutoffs.length) return 'low';
        return 'medium';
      }

      // Mobile probability tooltip handler (delegated)
      document.addEventListener('click', function(e) {
        if (!(window.matchMedia && window.matchMedia('(max-width: 600px)').matches)) return;
        const indicator = e.target.closest('.probability-indicator');
        if (indicator) {
          e.stopPropagation();
          const tooltip = indicator.nextElementSibling;
          if (tooltip && tooltip.classList.contains('probability-tooltip')) {
            // Hide other tooltips
            document.querySelectorAll('.probability-tooltip').forEach(t => { if (t !== tooltip) t.style.display = 'none'; });
            tooltip.style.display = tooltip.style.display === 'block' ? 'none' : 'block';
          }
        } else {
          // Hide all probability tooltips when clicking elsewhere on mobile
          document.querySelectorAll('.probability-tooltip').forEach(t => { t.style.display = 'none'; });
        }
      });

      function renderRow(r, idx, locked) {
  const opening = r.opening_rank_2024 || r.opening_rank || 'N/A';
  const closing = r.closing_rank_2024 || r.closing_rank || 'N/A';
  const userRank = search && search.rank ? search.rank : 0;
  if (locked) {
    return `
      <tr class="locked-row" onclick="window.dispatchEvent(new CustomEvent('openUpgradeModal'))" style="cursor: pointer;">
        <td>${idx}</td>
        <td colspan="7" style="text-align: center; padding: 20px;">
          <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; gap: 8px; color: #6b7280;">
            <i class='bx bx-lock' style='font-size: 24px; color: var(--primary);'></i>
            <span>Locked results - Click here to Upgrade</span>
          </div>
        </td>
      </tr>
    `;
  }
  const probability = calculateProbability(userRank, r);
  const probabilityClass = `probability-${probability}`;
  
  let tooltipText = '';
  if (probability === 'high') {
    tooltipText = '<strong>High probability:</strong> Your rank is better than all historical cutoffs';
  } else if (probability === 'medium') {
    tooltipText = '<strong>Medium probability:</strong> Mixed results compared to historical cutoffs';
  } else if (probability === 'low') {
    tooltipText = '<strong>Low probability:</strong> Your rank does not meet the historical cutoffs';
  } else {
    tooltipText = 'Insufficient data to calculate probability';
  }
  
  return `
    <tr>
      <td>${idx}</td>
      <td class="college-name">${escapeHtml(r.college_name)}
        <div class="probability-indicator ${probabilityClass}"></div>
        <div class="probability-tooltip">${tooltipText}</div>
      </td>
      <td>${createBadge(r.institute_type)}</td>
      <td>${escapeHtml(r.branch || '')}</td>
      <td>${escapeHtml(r.allotted_category || 'N/A')}</td>
      <td>${escapeHtml(r.round || 'N/A')}</td>
      <td>
        <div class="rank-container opening">${escapeHtml(String(opening))}
          <div class="rank-tooltip" style="display:none;">
            <div class="rank-year"><span class="year-label">2024:</span><span>${escapeHtml(String(r.opening_rank_2024 || 'N/A'))}</span></div>
            <div class="rank-year"><span class="year-label">2023:</span><span>${escapeHtml(String(r.opening_rank_2023 || 'N/A'))}</span></div>
            <div class="rank-year"><span class="year-label">2022:</span><span>${escapeHtml(String(r.opening_rank_2022 || 'N/A'))}</span></div>
          </div>
        </div>
      </td>
      <td>
        <div class="rank-container closing">${escapeHtml(String(closing))}
          <div class="rank-tooltip" style="display:none;">
            <div class="rank-year"><span class="year-label">2024:</span><span>${escapeHtml(String(r.closing_rank_2024 || 'N/A'))}</span></div>
            <div class="rank-year"><span class="year-label">2023:</span><span>${escapeHtml(String(r.closing_rank_2023 || 'N/A'))}</span></div>
            <div class="rank-year"><span class="year-label">2022:</span><span>${escapeHtml(String(r.closing_rank_2022 || 'N/A'))}</span></div>
          </div>
        </div>
      </td>
    </tr>
  `;
}

      function renderCard(r, displayIndex, locked) {
  const opening = r.opening_rank_2024 || r.opening_rank || 'N/A';
  const closing = r.closing_rank_2024 || r.closing_rank || 'N/A';
  const userRank = search && search.rank ? search.rank : 0;
  if (locked) {
    return `
      <div class="result-card locked-card" onclick="window.dispatchEvent(new CustomEvent('openUpgradeModal'))" style="cursor: pointer; position: relative; min-height: 120px; display: flex; flex-direction: column; justify-content: center; align-items: center; padding: 12px;">
        <div style="position: absolute; top: 12px; left: 12px; color: var(--text-light); font-weight: 600;">${displayIndex}.</div>
        <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; gap: 8px; color: #6b7280; font-size: 14px; text-align: center;">
            <i class='bx bx-lock' style='font-size:24px; color: var(--primary);'></i>
            <span>Locked results - Click here to Upgrade</span>
        </div>
      </div>
    `;
  }
  const probability = calculateProbability(userRank, r);
  const probabilityClass = `probability-${probability}`;
  
  let tooltipText = '';
  if (probability === 'high') {
    tooltipText = '<strong>High probability:</strong> Your rank is better than all historical cutoffs';
  } else if (probability === 'medium') {
    tooltipText = '<strong>Medium probability:</strong> Mixed results compared to historical cutoffs';
  } else if (probability === 'low') {
    tooltipText = '<strong>Low probability:</strong> Your rank does not meet the historical cutoffs';
  } else {
    tooltipText = 'Insufficient data to calculate probability';
  }
  
  return `
    <div class="result-card">
      <div class="probability-indicator ${probabilityClass}"></div>
      <div class="probability-tooltip">${tooltipText}</div>
      <div class="line1"><span class="sno">${displayIndex}.</span><span class="name">${escapeHtml(r.college_name)}</span></div>
      <div class="line2">${createBadge(r.institute_type)} <span>${escapeHtml(r.branch || '')}</span> <span>${escapeHtml(r.allotted_category || 'N/A')}</span></div>
      <div class="line3">
        <div class="rank-container">Round: ${escapeHtml(r.round || 'N/A')}</div>
        <div class="rank-container opening"> <span class="rank-label mobile-only">OR:</span> ${escapeHtml(String(opening))}
          <div class="rank-tooltip" style="display:none;">
            <div class="rank-year"><span class="year-label">2024:</span><span>${escapeHtml(String(r.opening_rank_2024 || 'N/A'))}</span></div>
            <div class="rank-year"><span class="year-label">2023:</span><span>${escapeHtml(String(r.opening_rank_2023 || 'N/A'))}</span></div>
            <div class="rank-year"><span class="year-label">2022:</span><span>${escapeHtml(String(r.opening_rank_2022 || 'N/A'))}</span></div>
          </div>
        </div>
        <div class="rank-container closing"> <span class="rank-label mobile-only">CR:</span> ${escapeHtml(String(closing))}
          <div class="rank-tooltip" style="display:none;">
            <div class="rank-year"><span class="year-label">2024:</span><span>${escapeHtml(String(r.closing_rank_2024 || 'N/A'))}</span></div>
            <div class="rank-year"><span class="year-label">2023:</span><span>${escapeHtml(String(r.closing_rank_2023 || 'N/A'))}</span></div>
            <div class="rank-year"><span class="year-label">2022:</span><span>${escapeHtml(String(r.closing_rank_2022 || 'N/A'))}</span></div>
          </div>
        </div>
      </div>
    </div>
  `;
}

      function escapeHtml(str) {
        if (str === null || typeof str === 'undefined') return '';
        return String(str).replace(/[&<>"']/g, function (s) {
          return ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":"&#39;"})[s];
        });
      }

      // create a single floating tooltip appended to body to avoid stacking/overflow issues
      const floating = document.createElement('div');
      floating.className = 'floating-tooltip';
      Object.assign(floating.style, {
        position: 'fixed',
        zIndex: 9999,
        display: 'none',
        background: 'white',
        border: '1px solid var(--border)',
        padding: '12px',
        borderRadius: '10px',
        boxShadow: '0 10px 30px rgba(0,0,0,0.12)',
        minWidth: '200px',
        lineHeight: '1.5',
      });
      document.body.appendChild(floating);

      function positionFloating(rc, isFirstRow) {
        const rcRect = rc.getBoundingClientRect();
        // measure after filling
        const ttRect = floating.getBoundingClientRect();
        const viewportHeight = window.innerHeight;
        const viewportWidth = window.innerWidth;

        // prefer below
        let top = rcRect.bottom + 8;
        let placeBelow = true;

        // if doesn't fit below, try above
        if (top + ttRect.height > viewportHeight - 8) {
          placeBelow = false;
          top = rcRect.top - ttRect.height - 8;
        }

        // special case: if first row and placing above would overlap the sticky header, force below
        if (!placeBelow && isFirstRow) {
          const headerRect = document.querySelector('header').getBoundingClientRect();
          if (top < headerRect.bottom) {
            placeBelow = true;
            top = rcRect.bottom + 8;
          }
        }

        // clamp if still out of viewport
        if (top < 8) top = 8;
        if (top + ttRect.height > viewportHeight - 8) top = Math.max(8, viewportHeight - ttRect.height - 8);

        // horizontal: prefer aligning to left of rc but if tooltip would be cut on right, shift left
        let left = rcRect.left;
        if (left + ttRect.width > viewportWidth - 8) {
          // try aligning to the right edge of rc minus tooltip width
          left = rcRect.right - ttRect.width;
        }
        // add a small left offset so tooltip doesn't touch screen edge
        if (left + ttRect.width > viewportWidth - 8) left = Math.max(8, viewportWidth - ttRect.width - 8);
        if (left < 8) left = 8;

        floating.style.top = `${top}px`;
        floating.style.left = `${left}px`;
      }

      function attachTooltipHandlers() {
        // No-op here; we use a single delegated setup below (set up once)
      }

      // Setup delegated listeners once to preserve desktop hover and mobile click behavior
      if (!window._rankTooltipDelegated) {
        window._rankTooltipDelegated = true;
        const isMobile = () => window.matchMedia && window.matchMedia('(max-width:600px)').matches;

        // Hover (desktop): show floating tooltip using delegation
        resultsContainer.addEventListener('mouseover', (e) => {
          if (isMobile()) return;
          const rc = e.target.closest('.rank-container');
          if (!rc) return;
          const inner = rc.querySelector('.rank-tooltip');
          if (!inner) return;
          floating.innerHTML = inner.innerHTML;
          floating.style.display = 'block';
          requestAnimationFrame(() => positionFloating(rc, false));
        });

        resultsContainer.addEventListener('mouseout', (e) => {
          if (isMobile()) return;
          const rc = e.target.closest('.rank-container');
          if (!rc) return;
          floating.style.display = 'none';
          floating.innerHTML = '';
        });

        // Click (mobile): toggle inline tooltip which is part of the card
        resultsContainer.addEventListener('click', (e) => {
          if (!isMobile()) return;
          const rc = e.target.closest('.rank-container');
          if (!rc) return;
          e.stopPropagation();
          const inner = rc.querySelector('.rank-tooltip');
          if (!inner) return;
          // hide other open inline tooltips first
          document.querySelectorAll('.rank-container .rank-tooltip').forEach(t => { if (t !== inner) t.style.display = 'none'; });
          inner.style.display = inner.style.display === 'block' ? 'none' : 'block';
        });

        // Global click to close inline mobile tooltips when clicking outside
        document.addEventListener('click', () => {
          if (isMobile()) {
            document.querySelectorAll('.rank-container .rank-tooltip').forEach(t => t.style.display = 'none');
          } else {
            floating.style.display = 'none';
            floating.innerHTML = '';
          }
        });
      }

      function renderPage(page) {
        currentPage = page;
        const start = (page - 1) * PER_PAGE;
        const pageItems = RAW_RESULTS.slice(start, start + PER_PAGE);

    // Check if payment was just made - if so, unlock everything
  const paymentJustMade = window.__PAID_CONSUMED === true;
  const forceUnlock = (typeof window.__ALLOW_ALL_OVERRIDE !== 'undefined') ? !!window.__ALLOW_ALL_OVERRIDE : false;
  
  // Use the appropriate value for locking
  const allowAll = forceUnlock || paymentJustMade || (Number(window.__USER_PAID) > 0) || window.__USER_PAID_BEFORE_SEARCH > 0 || PAID_CONSUMED;


        if (pageItems.length === 0) {
          tbody.innerHTML = '<tr><td colspan="8"><div class="empty-state"><div class="empty-icon"><i class="bx bx-search-alt"></i></div><div class="empty-title">No colleges matched your search</div><div class="empty-text">Try widening your rank range.</div></div></td></tr>';
          document.getElementById('results-cards').innerHTML = '';
        } else {
          // Determine locking rules: if user has no paid turns, lock results except when this request consumed a paid turn (PAID_CONSUMED)
          const total = RAW_RESULTS.length;
          // The `allowAll` variable is computed earlier and includes the paymentJustMade check, so use that to decide locks.

          // only allow half of the current page's items on first page when locked
          const allowedOnFirst = Math.ceil(pageItems.length / 2);
          tbody.innerHTML = pageItems.map((r, i) => {
            // i is index within the current page (0..pageItems.length-1)
            const globalIndex = start + i; // zero-based global index
            let locked = false;
            if (!allowAll) {
              if (page === 1) {
                locked = i >= allowedOnFirst;
              } else {
                locked = true;
              }
            }
            return renderRow(r, start + i + 1, locked);
          }).join('');
          document.getElementById('results-cards').innerHTML = pageItems.map((r, i) => {
            // i is index within page
            const globalIndex = start + i;
            let locked = false;
            if (!allowAll) {
              if (page === 1) locked = i >= allowedOnFirst; else locked = true;
            }
            return renderCard(r, start + i + 1, locked);
          }).join('');
        }
        resultsCountEl.textContent = `Showing ${RAW_RESULTS.length} entries`;
        buildPagination();
        attachTooltipHandlers();

        // Sanity check: if there are expected items but tbody ended up empty, rebuild rows (helps when mobile/table selectors mismatch)
        try {
          const expected = pageItems.length;
          const present = tbody.querySelectorAll('tr').length;
          if (expected > 0 && present === 0) {
            console.warn('renderPage: expected rows but none found, rebuilding rows');
            tbody.innerHTML = pageItems.map((r, i) => {
              const locked = (!allowAll) ? (page === 1 ? (i >= allowedOnFirst) : true) : false;
              return renderRow(r, start + i + 1, locked);
            }).join('');
          }
        } catch(e) { /* ignore */ }
      }

        // Update the turns display to show AFTER_SEARCH value (current actual turns)
  const pill = document.getElementById('turns-count');
  const parent = document.getElementById('turns-pill');
  if (pill && parent) {
    pill.textContent = window.__USER_PAID_AFTER_SEARCH;
    parent.classList.toggle('positive', window.__USER_PAID_AFTER_SEARCH > 0);
    parent.classList.toggle('zero', window.__USER_PAID_AFTER_SEARCH <= 0);
  }




      function buildPagination() {
        const pages = Math.max(1, Math.ceil(RAW_RESULTS.length / PER_PAGE));
        [paginationTop, paginationBottom].forEach(container => {
          container.innerHTML = '';
          const wrapper = document.createElement('div');
          wrapper.style.display = 'flex';
          wrapper.style.gap = '8px';
          wrapper.style.flexWrap = 'nowrap';
          wrapper.style.justifyContent = 'center';
          for (let i = 1; i <= pages; i++) {
            const btn = document.createElement('button');
            btn.className = 'filter-btn';
            btn.textContent = i;
            btn.dataset.page = i;
            if (i === currentPage) {
              btn.style.background = 'linear-gradient(to right, var(--primary), var(--primary-dark))';
              btn.style.color = '#fff';
            }
            btn.addEventListener('click', () => {
              renderPage(i);
              // after changing, sync scroll to top of results container for UX
              document.querySelector('.results-container').scrollIntoView({ behavior: 'smooth' });
            });
            wrapper.appendChild(btn);
          }
          container.appendChild(wrapper);
        });
      }

      // initial render
      renderPage(1);

  // Note: inline upgrade banners removed — we use a single floating CTA constrained to the locked region.

        function updateUpgradeBanner() {
          // This function is now deprecated and will be removed.
        }

  // expose to other scripts so modal open/close can re-check floater state
  try { window.updateUpgradeBanner = () => {}; } catch(e) {}
  // ensure banner is updated immediately on load
  try { /* updateUpgradeBanner(); */ } catch(e) {}

        // call when page renders and when window scrolls/resizes
        const origRenderPage = renderPage;
        renderPage = function(p) { origRenderPage(p); };
        
        // Expose a safe bridge so external scripts (or global handlers) can request a re-render.
        try {
          window.resultsPageRender = function(p) { try { renderPage(p); } catch(e) {} };
          window.getResultsCurrentPage = function() { try { return (typeof currentPage !== 'undefined') ? currentPage : 1; } catch(e) { return 1; } };
        } catch(e) {}


      // show toast if a paid search consumed a turn (suppress on reload/back-forward only)
      if (PAID_CONSUMED) {
        // Detect navigation type; prefer Navigation Timing L2
        let navType = 'navigate';
        try {
          const navEntries = performance.getEntriesByType && performance.getEntriesByType('navigation');
          if (navEntries && navEntries.length > 0) navType = navEntries[0].type;
          else if (performance && performance.navigation) {
            // Legacy: 1 = reload, 2 = back_forward
            navType = performance.navigation.type === 1 ? 'reload' : (performance.navigation.type === 2 ? 'back_forward' : 'navigate');
          }
        } catch(e) {}
        const isReloadish = (navType === 'reload' || navType === 'back_forward');
        if (!isReloadish) {
          window.__PAID_CONSUMED = true;
          showTurnConsumedToast('1 turn consumed');
        }
      }

      // Listen for a global event to open the upgrade modal
      window.addEventListener('openUpgradeModal', () => {
        const modal = document.getElementById('upgrade-modal');
        if (modal) {
            modal.classList.add('show');
            document.body.style.overflow = 'hidden';
        }
      });
    });
  </script>
  <script>
    // Desktop rank-info toggle: clicking the info icon will hide/show the explanatory text
    (function() {
      const TOGGLE_ID = 'rank-info-toggle';
      const BOX_ID = 'rank-info-box-desktop';
      const storageKey = 'rankInfoCollapsed_v1';
      const toggle = document.getElementById(TOGGLE_ID);
      const box = document.getElementById(BOX_ID);
      if (!toggle || !box) return;

      // initialize state from sessionStorage (per-tab)
      const collapsed = sessionStorage.getItem(storageKey) === '1';
      if (collapsed) box.classList.add('collapsed');

      toggle.addEventListener('click', function(e) {
        e.stopPropagation();
        const nowCollapsed = box.classList.toggle('collapsed');
        sessionStorage.setItem(storageKey, nowCollapsed ? '1' : '0');
      });
    })();
  </script>
  <script>
    // Wire navigation to preserve saved filters (stored by index.ejs as 'pf_filters_v1')
    (function() {
      const BACK_ID = 'back-to-search';
      const SEARCH_AGAIN_ID = 'search-again';
      function goBackPreserve() {
        // Navigate to index directly to ensure header is re-populated from localStorage
        window.location.href = '/';
      }

      const back = document.getElementById(BACK_ID);
      if (back) back.addEventListener('click', function(e) { e.preventDefault(); goBackPreserve(); });

      const again = document.getElementById(SEARCH_AGAIN_ID);
      if (again) again.addEventListener('click', function(e) { e.preventDefault(); goBackPreserve(); });
      // when returning to index via back navigation, ensure index header reads localStorage; add pageshow sync to update turns pill when this page gains focus
      window.addEventListener('pageshow', function() {
  // No localStorage read — the authoritative value comes from server; use fetch on load and when TS changes.
      });
    })();
  </script>
    <!-- Upgrade Modal -->
<div id="upgrade-modal" class="upgrade-modal">
  <div class="upgrade-modal-content">
    <div class="upgrade-header">
      <div class="upgrade-icon">
        <i class='bx bx-crown'></i>
      </div>
      <h2>Unlock all results instantly</h2>
      <p>Kickstart your career with the best college match — for less than a pizza!</p>
      <button class="close-modal" id="upgrade-cancel">
        <i class='bx bx-x'></i>
      </button>
    </div>
    
    <!-- Replace the entire plans-container section with this code -->
<div class="plans-container">
  <!-- Plans Carousel for Mobile -->
  <div class="plans-carousel">
    <div class="plan-card" data-plan="small">
      <div class="plan-header">
        <h3>Starter Pack</h3>
        <div class="plan-price">
          <span class="currency">₹</span>
          <span class="amount">200</span>
        </div>
      </div>
      <div class="plan-features">
        <div class="feature">
          <i class='bx bx-check-circle'></i>
          <span>Add 5 Search Turns</span>
        </div>
        <div class="feature">
          <i class='bx bx-check-circle'></i>
          <span>Priority Support</span>
        </div>
        <div class="feature">
          <i class='bx bx-check-circle'></i>
          <span>Personalized Recommendations</span>
        </div>
      </div>
      <button class="plan-select-btn">Buy Starter — 5 turns</button>
    </div>
    
    <div class="plan-card featured" data-plan="medium">
      <div class="plan-popular-tag">Most Popular</div>
      <div class="plan-header">
        <h3>Pro Pack</h3>
        <div class="plan-price">
          <span class="currency">₹</span>
          <span class="amount">500</span>
          <span class="save-tag">Save 17%</span>
        </div>
      </div>
      <div class="plan-features">
        <div class="feature">
          <i class='bx bx-check-circle'></i>
          <span>Add 15 Search Turns</span>
        </div>
        <div class="feature">
          <i class='bx bx-check-circle'></i>
          <span>Priority Support</span>
        </div>
        <div class="feature">
          <i class='bx bx-check-circle'></i>
          <span>Personalized Recommendations</span>
        </div>
      </div>
      <button class="plan-select-btn featured-btn">Buy Pro — 15 turns</button>
    </div>
    
    <div class="plan-card" data-plan="large">
      <div class="plan-header">
        <h3>Max Pack</h3>
        <div class="plan-price">
          <span class="currency">₹</span>
          <span class="amount">1000</span>
          <span class="save-tag">Save 50%</span>
        </div>
      </div>
      <div class="plan-features">
        <div class="feature">
          <i class='bx bx-check-circle'></i>
          <span>Add 50 Search Turns</span>
        </div>
        <div class="feature">
          <i class='bx bx-check-circle'></i>
          <span>Priority Support</span>
        </div>
        <div class="feature">
          <i class='bx bx-check-circle'></i>
          <span>Personalized Recommendations</span>
        </div>
      </div>
      <button class="plan-select-btn">Buy Max — 50 turns</button>
    </div>
  </div>
  
  <!-- Carousel Navigation Dots -->
  <div class="carousel-dots">
    <span class="dot active" data-index="0"></span>
    <span class="dot" data-index="1"></span>
    <span class="dot" data-index="2"></span>
  </div>
  
  <!-- Carousel Navigation Arrows (for desktop) -->
  <button class="carousel-arrow carousel-prev">
    <i class='bx bx-chevron-left'></i>
  </button>
  <button class="carousel-arrow carousel-next">
    <i class='bx bx-chevron-right'></i>
  </button>
</div>
    
    <div class="upgrade-footer">
      <p><i class='bx bx-shield-quarter'></i> All payments are secure and encrypted</p>
    </div>
  </div>
</div>

<script>

   // Upgrade modal logic and Razorpay checkout integration
(function(){
  const upgradeModal = document.getElementById('upgrade-modal');
  const turnsPill = document.getElementById('turns-pill');
  
  function openModal(){ 
    upgradeModal.classList.add('show');
    document.body.style.overflow = 'hidden';
    const floater = document.getElementById('upgrade-floater');
    if (floater) floater.style.display = 'none';
    // Ensure Pro Pack (middle card) is visible first on mobile
    try {
      if (window.matchMedia && window.matchMedia('(max-width: 900px)').matches && window.setPlanIndex) {
        // Wait a tick for layout so measurements are correct, then jump to Pro
        requestAnimationFrame(() => setTimeout(() => window.setPlanIndex(1), 60));
      }
    } catch(e) {}
  }
  
  function closeModal(){ 
    upgradeModal.classList.remove('show');
    document.body.style.overflow = 'auto';
  }
  
  // Open modal when clicking turns pill or when receiving the global event
  if (turnsPill) turnsPill.addEventListener('click', openModal);
  window.addEventListener('openUpgradeModal', openModal);
  
  // Close modal when clicking close button
  document.getElementById('upgrade-cancel').addEventListener('click', closeModal);
  
  // Close modal when clicking outside content
  upgradeModal.addEventListener('click', function(e) {
    if (e.target === upgradeModal) closeModal();
  });
  
  // Refresh authoritative turns from server when modal opens
  async function refreshTurns() {
    try {
      const r = await fetch('/user/paid-turns', { method:'GET', credentials:'same-origin' });
      if (r.ok) {
        const d = await r.json();
        const val = Number(d.paid_turns || 0);
        window.__USER_PAID = val;
        // Always reflect the authoritative server value without any client-side deductions
        const pill = document.getElementById('turns-count');
        if (pill) pill.textContent = val;
        const parent = document.getElementById('turns-pill');
        if (parent) {
          parent.classList.toggle('positive', val > 0);
          parent.classList.toggle('zero', val <= 0);
        }
      }
    } catch(e) {}
  }
  
  // Handle plan selection
// Handle plan selection - UPDATED VERSION
// Handle plan selection - RESTORED FUNCTIONALITY
document.querySelectorAll('.plan-select-btn').forEach(btn => {
    btn.addEventListener('click', async function() {
        const planCard = this.closest('.plan-card');
        const plan = planCard.dataset.plan;
        
        try {
            const resp = await fetch('/payment/create-order', { 
                method: 'POST', 
                headers: { 'Content-Type':'application/json' }, 
                body: JSON.stringify({ plan }) 
            });
            
            const data = await resp.json();
            if (!resp.ok) throw new Error(data.error || 'Order creation failed');
            
            // Open Razorpay checkout
            const options = {
                key: data.key_id,
                amount: data.order.amount,
                currency: data.order.currency,
                name: 'College Preferencer',
                description: data.planLabel,
                order_id: data.order.id,
                handler: async function(response){
                    // verify on server
                    const verifyResp = await fetch('/payment/verify', { 
                        method:'POST', 
                        headers:{ 'Content-Type':'application/json' }, 
                        body: JSON.stringify({
                          ...response,
                          turnsBeforeSearch: (typeof window.__USER_PAID_BEFORE_SEARCH !== 'undefined' ? window.__USER_PAID_BEFORE_SEARCH : 0)
                        }) 
                    });
                    const verifyData = await verifyResp.json();
                    if (verifyData.success) {
                        // Show success message
                        showNotification(`Purchase successful! ${verifyData.turnsAdded} turns added.`, 'success');
                        // Update all state + UI via the helper to avoid double re-renders
                        try { window.applyPaidUpdate(verifyData.newTurns); } catch(e) {}
                        // If entries were locked (turnBeforeSearch == 0), current unlock consumes 1 new turn
                        if (verifyData.wasLocked === true) {
                          try { showTurnConsumedToast('1 turn consumed'); } catch(e) {}
                        }
                        // Close modal shortly after
                        setTimeout(() => { try { closeModal(); } catch(e) {} }, 400);
                    } else {
                        showNotification('Payment verification failed.', 'error');
                    }
                },
                modal: { 
                    ondismiss: function() {
                        showNotification('Payment cancelled', 'info');
                    } 
                },
                theme: { color: '#4361ee' }
            };
            
            const rzp = new Razorpay(options);
            rzp.open();
            
        } catch (err) {
            console.error(err);
            showNotification('Unable to start payment.', 'error');
        }
    });
});
  
  // Helper function to show notifications
  function showNotification(message, type = 'info') {
    // Remove any existing notifications
    const existingNotification = document.querySelector('.notification');
    if (existingNotification) {
      existingNotification.remove();
    }
    
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
      <div class="notification-content">
        <i class='bx ${type === 'success' ? 'bx-check-circle' : type === 'error' ? 'bx-error-circle' : 'bx-info-circle'}'></i>
        <span>${message}</span>
      </div>
    `;
    
    // Add to page
    document.body.appendChild(notification);
    
    // Show notification
    setTimeout(() => {
      notification.classList.add('show');
    }, 10);
    
    // Hide after 3 seconds
    setTimeout(() => {
      notification.classList.remove('show');
      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 300);
    }, 3000);
  }
  
  // Add CSS for notifications
  const notificationStyles = document.createElement('style');
  notificationStyles.textContent = `
    .notification {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: white;
      border-radius: 8px;
      padding: 15px 20px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
      display: flex;
      align-items: center;
      z-index: 3000;
      transform: translateY(100px);
      opacity: 0;
      transition: all 0.3s ease;
    }
    
    .notification.show {
      transform: translateY(0);
      opacity: 1;
    }
    
    .notification-success {
      border-left: 4px solid var(--secondary);
    }
    
    .notification-error {
      border-left: 4px solid var(--accent);
    }
    
    .notification-info {
      border-left: 4px solid var(--primary);
    }
    
    .notification-content {
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .notification-content i {
      font-size: 20px;
    }
    
    .notification-success i {
      color: var(--secondary);
    }
    
    .notification-error i {
      color: var(--accent);
    }
    
    .notification-info i {
      color: var(--primary);
    }
    
    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.03); }
      100% { transform: scale(1); }
    }
  `;
  
  document.head.appendChild(notificationStyles);
})();



// Carousel functionality for mobile plans
(function() {
  const carousel = document.querySelector('.plans-carousel');
  const dots = document.querySelectorAll('.dot');
  const prevBtn = document.querySelector('.carousel-prev');
  const nextBtn = document.querySelector('.carousel-next');
  const planCards = document.querySelectorAll('.plan-card');
  
  if (!carousel) return;
  
  // Default to Pro Pack (middle card) on mobile
  let currentIndex = (window.matchMedia && window.matchMedia('(max-width: 900px)').matches) ? 1 : 0;
  
  // Function to update carousel position
  function updateCarousel() {
    const cardWidth = planCards[0].offsetWidth + 30; // width + margin
    carousel.scrollTo({
      left: currentIndex * cardWidth,
      behavior: 'smooth'
    });

  // Expose a helper so other scripts (modal open) can force the active plan
  window.setPlanIndex = function(i) {
    if (!planCards || !planCards.length) return;
    currentIndex = Math.max(0, Math.min(planCards.length - 1, i));
    // Prefer snapping the desired card into view, then update active states
    try {
      const card = planCards[currentIndex];
      if (card && card.scrollIntoView) {
        card.scrollIntoView({ behavior: 'auto', inline: 'center', block: 'nearest' });
      }
    } catch(e) {}
    updateCarousel();
  };
    
    // Update active dot
    dots.forEach((dot, index) => {
      dot.classList.toggle('active', index === currentIndex);
    });
    
    // Update active card
    planCards.forEach((card, index) => {
      card.classList.toggle('active', index === currentIndex);
    });
  }
  
  // Next button click
  if (nextBtn) {
    nextBtn.addEventListener('click', () => {
      currentIndex = (currentIndex + 1) % planCards.length;
      updateCarousel();
    });
  }
  
  // Previous button click
  if (prevBtn) {
    prevBtn.addEventListener('click', () => {
      currentIndex = (currentIndex - 1 + planCards.length) % planCards.length;
      updateCarousel();
    });
  }
  
  // Dot navigation
  dots.forEach(dot => {
    dot.addEventListener('click', () => {
      currentIndex = parseInt(dot.dataset.index);
      updateCarousel();
    });
  });
  
  // Swipe handling for touch devices
  let touchStartX = 0;
  let touchEndX = 0;
  
  carousel.addEventListener('touchstart', e => {
    touchStartX = e.changedTouches[0].screenX;
  }, false);
  
  carousel.addEventListener('touchend', e => {
    touchEndX = e.changedTouches[0].screenX;
    handleSwipe();
  }, false);
  
  function handleSwipe() {
    const swipeThreshold = 50;
    
    if (touchEndX < touchStartX - swipeThreshold) {
      // Swipe left - go to next
      currentIndex = (currentIndex + 1) % planCards.length;
      updateCarousel();
    }
    
    if (touchEndX > touchStartX + swipeThreshold) {
      // Swipe right - go to previous
      currentIndex = (currentIndex - 1 + planCards.length) % planCards.length;
      updateCarousel();
    }
  }
  
  // Initialize carousel (ensure correct default active card)
  updateCarousel();
  
  // Adjust for window resize
  window.addEventListener('resize', updateCarousel);
})();

</script>

    <script>
      // Sync paid-turns across windows/tabs and update results UI immediately.
      // Other pages (index or payment flow) should set `localStorage.__USER_PAID = newTurns`
      // or call `window.onPaymentVerified(newTurns)` directly to notify this page.
      window.applyPaidUpdate = function(newTurns) {
        const n = Number(newTurns);
        if (Number.isNaN(n)) return;
        // Short-lived override to force unlock while state propagates
        try { window.__ALLOW_ALL_OVERRIDE = true; } catch(e) {}
        try { clearTimeout(window.__ALLOW_ALL_OVERRIDE_T); } catch(e) {}
        try { window.__ALLOW_ALL_OVERRIDE_T = setTimeout(() => { try { window.__ALLOW_ALL_OVERRIDE = false; } catch(e) {} }, 1200); } catch(e) {}
        // Update window/global vars used by the page
        try { window.__USER_PAID_AFTER_SEARCH = n; } catch (e) {}
        try { window.__USER_PAID = n; } catch (e) {}
        // Mark that a payment was just made so renderPage will unlock results for this session
        try { window.__PAID_CONSUMED = true; } catch (e) {}
        try { window.__USER_PAID_BEFORE_SEARCH = n; } catch (e) {}
        // Persist authoritative value for other pages
  try {
    // Avoid ping-pong: don't rebroadcast when we're handling an inbound storage event
    if (!window.__INBOUND_PAID_SYNC) {
      localStorage.setItem('__USER_PAID_TS', String(Date.now()));
    }
  } catch (e) {}

        // Update header pill
        try {
          const pill = document.getElementById('turns-count');
          if (pill) pill.textContent = String(n);
          const parent = document.getElementById('turns-pill');
          if (parent) {
            parent.classList.toggle('positive', n > 0);
            parent.classList.toggle('zero', n <= 0);
          }
        } catch (e) {}

        // Refresh upgrade banner and re-render current page of results (debounced to avoid flicker)
        try { if (typeof updateUpgradeBanner === 'function') updateUpgradeBanner(); } catch (e) {}
        try {
          if (!window.__RENDER_SCHEDULED) {
            window.__RENDER_SCHEDULED = true;
            (window.requestAnimationFrame || setTimeout)(function() {
              try {
                let pageTo = 1;
                try { pageTo = (typeof window.getResultsCurrentPage === 'function') ? window.getResultsCurrentPage() : (typeof currentPage !== 'undefined' ? currentPage : 1); } catch (err) {}
                // Prefer the safe bridge exposed by the page
                try { if (typeof window.resultsPageRender === 'function') { window.resultsPageRender(pageTo); return; } } catch(e) {}
                if (typeof renderPage === 'function') renderPage(pageTo);
              } finally {
                try { window.__RENDER_SCHEDULED = false; } catch(e) {}
              }
            }, 0);
          }
        } catch (e) {}
      };

      // Storage event: fires in all other tabs/windows when localStorage is changed
      // React to both the turns key and the timestamp key so updates reliably propagate.
      window.addEventListener('storage', function (ev) {
        if (!ev) return;
        // When timestamp key changes, fetch authoritative paid_turns from server
        if (ev.key === '__USER_PAID_TS') {
          (async function(){
            try {
              const resp = await fetch('/user/paid-turns', { method: 'GET', credentials: 'same-origin' });
              if (resp.ok) {
                const data = await resp.json();
                const newVal = Number(data.paid_turns || 0);
                if (!Number.isNaN(newVal)) {
                  try { window.__INBOUND_PAID_SYNC = true; } catch(e) {}
                  try { window.applyPaidUpdate(newVal); } finally { try { window.__INBOUND_PAID_SYNC = false; } catch(e) {} }
                }
              }
            } catch (e) {}
          })();
        }
      });

      // Helper for same-window payment flows to call directly after verify
      window.onPaymentVerified = function(newTurns) {
        window.applyPaidUpdate(newTurns);
        // show a small transient toast so user sees immediate feedback
        try {
          const toast = document.createElement('div');
          toast.className = 'search-toast';
          toast.innerHTML = "<i class='bx bx-check-circle'></i><span>Payment successful — results unlocked</span>";
          document.body.appendChild(toast);
          setTimeout(() => { toast.remove(); }, 2500);
        } catch (e) {}
      };





// Add this function to handle page refresh after successful payment
function refreshResultsAfterPayment() {
    // Listen for payment verification success
    window.addEventListener('paymentSuccess', function() {
        // Refresh the current page to show unlocked results
        setTimeout(function() {
            window.location.reload();
        }, 500);
    });
}

// Call this function on page load
refreshResultsAfterPayment();


    </script>

    </body>
    </html>




