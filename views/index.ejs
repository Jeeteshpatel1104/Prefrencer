<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>College Preferencer</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <link rel="stylesheet" href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css">
    <link rel="icon" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3E%3Cpath d='M50 15 L80 45 L75 85 L25 85 L20 45 Z' fill='%234361ee'/%3E%3Ccircle cx='50' cy='45' r='14' fill='%2306d6a0'/%3E%3Ccircle cx='50' cy='70' r='8' fill='white'/%3E%3C/svg%3E" type="image/svg+xml">
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <style>
        :root {
            --primary: #4361ee;
            --primary-dark: #3a56d4;
            --secondary: #06d6a0;
            --accent: #ff6b6b;
            --light: #f8f9fa;
            --dark: #1e293b;
            --text: #334155;
            --text-light: #64748b;
            --border: #e2e8f0;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
            --transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        }
        * { margin: 0; padding: 0; box-sizing: border-box; font-family: 'Poppins', sans-serif; }
        body { background: linear-gradient(135deg, #f0f4f8 0%, #e6e9f0 100%); min-height: 100vh; color: var(--text); padding: 20px; position: relative; overflow-x: hidden; }
        body::before { content: ""; position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: linear-gradient(to right, rgba(0, 0, 0, 0.03) 1px, transparent 1px), linear-gradient(to bottom, rgba(0, 0, 0, 0.03) 1px, transparent 1px); background-size: 40px 40px; z-index: -1; }
        .decoration { position: absolute; z-index: 0; }
        .decoration-1 { top: 50px; right: 50px; width: 150px; height: 150px; border-radius: 50%; background: linear-gradient(135deg, var(--primary) 0%, #5e72e4 100%); opacity: 0.1; }
        .decoration-2 { bottom: 50px; left: 50px; width: 200px; height: 200px; border-radius: 50%; background: linear-gradient(135deg, var(--secondary) 0%, #06b6d4 100%); opacity: 0.08; }
        /* Header */
    header {
      background: white;
      box-shadow: var(--shadow);
      border-radius: 16px;
      max-width: 1200px;
      margin: 0 auto 30px;
      padding: 15px 30px;
    }

    .header-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
      max-width: 1200px;
      margin: 0 auto;
    }

   .header-logo {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: white;
        border-radius: 50%;
        box-shadow: var(--shadow);
        padding: 8px;
    }
    .turns-pill {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        padding: 6px 10px;
        border-radius: 999px;
        font-weight: 600;
        font-size: 13px;
        border: 1px solid var(--border);
    }
    .turns-pill.zero { color: #9ca3af; background: #f3f4f6; }
    .turns-pill.positive { color: white; background: linear-gradient(to right, var(--primary), var(--primary-dark)); }
    .user-info {
      display: flex;
      align-items: center;
      gap: 15px;
    }

    .user-name {
      font-weight: 500;
      color: var(--dark);
      font-size: 15px;
    }

    .logout-btn {
      background: linear-gradient(to right, var(--primary), var(--primary-dark));
      color: white;
      border: none;
      border-radius: 8px;
      padding: 8px 16px;
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      transition: var(--transition);
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .logout-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(67, 97, 238, 0.3);
    }
        .container { max-width: 1200px; margin: 0 auto; position: relative; z-index: 1; padding: 0 20px; }
        .back-nav { margin-bottom: 30px; }
        .back-link { display: inline-flex; align-items: center; gap: 8px; color: var(--primary); font-weight: 500; text-decoration: none; padding: 8px 16px; border-radius: 8px; transition: var(--transition); }
        .back-link:hover { background: rgba(67, 97, 238, 0.1); transform: translateX(-5px); }
        .back-link i { font-size: 18px; }
        .hero { text-align: center; margin-bottom: 40px; position: relative; }
        .hero-logo { width: 100px; height: 100px; margin: 0 auto 15px; display: flex; align-items: center; justify-content: center; background: white; border-radius: 50%; box-shadow: var(--shadow); padding: 15px; }
        .hero-title { font-size: 2.8rem; font-weight: 700; color: var(--dark); margin-bottom: 10px; letter-spacing: -0.5px; }
        .hero-tag { display: inline-flex; align-items: center; gap: 8px; background: rgba(6, 214, 160, 0.15); color: #06a17e; padding: 8px 20px; border-radius: 50px; font-weight: 500; margin-top: 10px; }
        .form-container { background: white; border-radius: 20px; box-shadow: var(--shadow); padding: 40px; margin-bottom: 40px; position: relative; z-index: 2; }
    /* Use a smaller minimum so the grid auto-fits narrow phones without horizontal overflow */
    .form-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(160px, 1fr)); gap: 18px; margin-bottom: 18px; }
    .form-group { margin-bottom: 0; min-width: 0; }
        .form-label { display: block; font-size: 15px; font-weight: 500; color: var(--dark); margin-bottom: 10px; }
        /* Inputs and selects share the same rounded, elevated appearance used by the custom dropdowns */
        .form-input, .form-select {
            width: 100%;
            padding: 14px 20px;
            border: 1px solid var(--border);
            border-radius: 12px;
            font-size: 15px;
            transition: var(--transition);
            background: #f9fafc;
            box-shadow: 0 4px 15px rgba(67, 97, 238, 0.08);
            /* make native selects behave/look consistently across browsers */
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            display: inline-block;
            line-height: 1.2;
            /* prevent children from forcing the grid to overflow */
            min-width: 0;
            max-width: 100%;
            box-sizing: border-box;
        }

        .form-input:focus, .form-select:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 4px rgba(67, 97, 238, 0.15);
            background: white;
        }

        /* Make the select show a custom caret and reserve space for it so the select looks like the rounded dropdown button */
        .form-select {
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%2364748b' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: right 18px center;
            background-size: 16px;
            padding-right: 44px; /* leave space for the caret so text doesn't overlap */
            cursor: pointer;
        }
        .dropdown { position: relative; width: 100%; }
        .dropdown-btn { width: 100%; padding: 14px 20px; background: #f9fafc; border: 1px solid var(--border); border-radius: 12px; font-size: 15px; text-align: left; cursor: pointer; display: flex; justify-content: space-between; align-items: center; transition: var(--transition); box-shadow: 0 4px 15px rgba(67, 97, 238, 0.08); }
        .dropdown-btn:hover { background: white; border-color: var(--primary); }
        .dropdown-btn i { font-size: 18px; transition: var(--transition); }
        .dropdown-content { display: none; position: absolute; top: 100%; left: 0; right: 0; background: white; border: 1px solid var(--border); border-radius: 12px; padding: 15px; box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1); z-index: 10; max-height: 250px; overflow-y: auto; margin-top: 5px; }
        .dropdown-content.show { display: block; }
        .dropdown-header { display: flex; align-items: center; padding: 8px 0; margin-bottom: 10px; border-bottom: 1px solid var(--border); }
        .dropdown-option { display: flex; align-items: center; padding: 10px 0; cursor: pointer; }
        .dropdown-option input { margin-right: 12px; }
        .dropdown-option:hover { color: var(--primary); }
        .checkbox-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 15px; margin-top: 10px; }
        .checkbox-item { display: flex; align-items: center; }
        .checkbox-item input { margin-right: 10px; }
        .submit-btn { display: block; margin: 40px auto 0; background: linear-gradient(to right, var(--primary), var(--primary-dark)); color: white; border: none; border-radius: 12px; padding: 16px 50px; font-size: 18px; font-weight: 600; cursor: pointer; transition: var(--transition); box-shadow: 0 4px 15px rgba(67, 97, 238, 0.3); }
        .submit-btn:hover { background: linear-gradient(to right, var(--primary-dark), #2f44c0); transform: translateY(-3px); box-shadow: 0 6px 20px rgba(67, 97, 238, 0.4); }
        .info-box { background: rgba(255, 229, 100, 0.2); border-left: 4px solid #ffd43b; color: #8e7b0c; padding: 20px; border-radius: 12px; display: flex; align-items: flex-start; gap: 15px; max-width: 800px; margin: 0 auto; }
        .info-icon { font-size: 24px; color: #f59f00; flex-shrink: 0; }
        .info-text { font-size: 15px; line-height: 1.6; }
    @media (max-width: 1024px) { .hero-title { font-size: 2.4rem; } .form-container { padding: 30px; } }
    /* Advanced filters box */
    /* Advanced filters toggle */
/* Advanced filters toggle */
#advanced-filters-toggle {
    text-align: center;
    margin: 1rem 0 1.5rem;
}

/* Main button styles */
#show-advanced-btn {
    background: transparent;
    color: #333;
    border: none;
    padding: 0.5rem 1rem;
    cursor: pointer;
    font-weight: 600;
    font-size: 0.95rem;
    transition: all 0.25s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
}

/* Chevron before text - points down by default (show more) */
#show-advanced-btn::before {
    content: "‹‹";              /* Double chevron */
    display: inline-block;
    font-weight: 900;
    font-size: 1.2rem;          /* Bigger size */
    transform: rotate(-90deg);   /* Points down */
    transition: transform 0.3s ease;
    margin-right: 0.5rem;
    line-height: 1;
}

/* Chevron points up when expanded (hide options) */
#advanced-filters-toggle.show #show-advanced-btn::before {
    transform: rotate(90deg); /* Points up */
}

#show-advanced-btn:hover {
    color: #000;
}

/* Filters container styles remain unchanged */
#advanced-filters {
    display: none;
    background: white;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    padding: 1.5rem;
    margin-top: 1rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}

#advanced-filters.show {
    display: block;
    animation: fadeIn 0.3s ease-out;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
}
        /* Mobile overrides: keep desktop styles above unchanged */
        @media (max-width: 768px) {
            header { padding: 12px 16px; border-radius: 10px; }
            /* hide big decorations on mobile to reduce clutter */
            .decoration-1, .decoration-2 { display: none !important; }
            .header-content { flex-direction: column; align-items: flex-start; gap: 8px; }
            .form-container { padding: 18px; }
            .advanced-box { padding: 12px; }
            .filters-grid { display: block; }
            #advanced-filters { padding: 12px; }
            /* Transform large multi-column dropdowns into scrollable blocks */
            .dropdown-options { max-height: 220px; overflow-y: auto; -webkit-overflow-scrolling: touch; }
        }
                @media (max-width: 360px) {
                    header { padding: 10px 12px; }
                    /* Ensure main title and tagline fit on a single line on very narrow screens */
                    .hero-title { font-size: 24px !important; line-height:1.05; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
                    .hero-tag { font-size: 12px !important; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
                    /* Slightly reduce container side padding so content has more room */
                    .container { padding-left: 8px; padding-right: 8px; }
                  /* tighten spacing under header on mobile */
                  .upgrade-header { margin-bottom: 8px; }
                  .upgrade-header p { margin-bottom: 0; }

                }

        @media (max-width: 480px) {
            body { padding: 10px; }
            .header-logo { height: 34px; }
            .hero-title { font-size: 1.6rem; }
            .form-container { padding: 12px; }
            #show-advanced-btn { font-size: 14px; }
            .advanced-box { padding: 10px; }
            .dropdown-option { padding: 6px 0; }
            /* Keep logo + welcome + logout on a single line on small screens */
            .header-content { flex-direction: row; align-items: center; justify-content: space-between; }
            .user-info { display: flex; align-items: center; gap: 8px; }
            .user-name { font-size: 13px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 45vw; }
            .logout-btn { padding: 6px 10px; font-size: 13px; }
            /* Reduce submit button size on small screens */
            .submit-btn { padding: 12px 30px; font-size: 16px; border-radius: 10px; }
        }


        /* Info anchor styling - fixed alignment */
        .info-anchor {
            display: inline-flex;
            align-items: center;
            margin-left: 6px;
            color: var(--primary);
            text-decoration: none;
            transition: var(--transition);
            vertical-align: middle;
        }

        .info-anchor i {
            font-size: 18px;
        }

        .info-anchor:hover {
            color: var(--primary-dark);
            transform: scale(1.1);
        }

        /* Description section styling with lighter background */
        .description-section {
            background: rgba(255, 255, 255, 0.7);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            box-shadow: var(--shadow);
            padding: 30px;
            margin: 40px 0;
            position: relative;
            z-index: 2;
            border: 1px solid rgba(255, 255, 255, 0.9);
        }

        .description-title {
            font-size: 1.8rem;
            font-weight: 600;
            color: var(--dark);
            margin-bottom: 25px;
            text-align: center;
            position: relative;
            padding-bottom: 15px;
        }

        .description-title::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 80px;
            height: 4px;
            background: linear-gradient(to right, var(--primary), var(--secondary));
            border-radius: 2px;
        }

        .description-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 25px;
        }

        .description-item {
            padding: 20px;
            border-radius: 12px;
            background: rgba(255, 255, 255, 0.8);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            transition: var(--transition);
            border: 1px solid rgba(226, 232, 240, 0.6);
        }

        .description-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
        }

        .description-item h3 {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--primary-dark);
            margin-bottom: 10px;
            display: flex;
            align-items: center;
        }

        .description-item h3 i {
            margin-right: 10px;
            font-size: 1.4rem;
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .description-item p {
            color: var(--text);
            line-height: 1.6;
            margin: 0;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .description-section {
                padding: 20px;
            }
            
            .description-title {
                font-size: 1.5rem;
                    /* Further reduce submit button size on very small screens */
                    .submit-btn { padding: 10px 20px; font-size: 15px; }
            }
            
            .description-item {
                padding: 15px;
            }
            
            .description-item h3 {
                font-size: 1.1rem;
            }
        }

      .footer {
            text-align: center;
            margin-top: 50px;
            padding-top: 20px;
            color: var(--text-light);
            font-size: 0.9rem;
        }

   /* Mobile form font size adjustments */
@media (max-width: 768px) {
    .form-label {
        font-size: 14px !important;
    }
    
    .form-input, .form-select, .dropdown-btn {
        font-size: 14px !important;
        padding: 12px 16px;
    }
    
    /* Dropdown options font size */
    .dropdown-option {
        font-size: 14px !important;
    }
    
    /* Checkbox labels font size */
    .checkbox-item label {
        font-size: 14px !important;
    }
}

/* Description section heading size fix */
.description-title {
    font-size: 1.8rem;
}

.description-item h3 {
    font-size: 1.2rem;
}

.description-item p {
    font-size: 0.95rem;
    line-height: 1.6;
}

/* Ensure proper sizing on desktop */
@media (min-width: 769px) {
    .description-title {
        font-size: 1.8rem;
    }
    
    .description-item h3 {
        font-size: 1.2rem;
    }
    
    .description-item p {
        font-size: 0.95rem;
    }
    
    /* Consistent font size for desktop dropdown options */
    .dropdown-option {
        font-size: 14px;
    }
}

/* Additional mobile optimization for very small screens */
@media (max-width: 360px) {
    .form-label {
        font-size: 13px !important;
    }
    
    .form-input, .form-select, .dropdown-btn {
        font-size: 13px !important;
        padding: 10px 14px;
    }
    
    .dropdown-option {
        font-size: 13px !important;
    }
    
    .checkbox-item label {
        font-size: 13px !important;
    }
}

/* Make all select options same size */
.form-select option {
    font-size: 14px;
}

/* Mobile description section adjustments */
@media (max-width: 768px) {
    .description-title {
        font-size: 1.4rem !important;
        margin-bottom: 20px;
        padding-bottom: 10px;
    }
    
    .description-item h3 {
        font-size: 1.1rem !important;
    }
    
    .description-item p {
        font-size: 0.9rem !important;
        line-height: 1.5;
    }
    
    .description-section {
        padding: 20px 15px;
        margin: 30px 0;
    }
    
    .description-item {
        padding: 15px;
    }
}

/* Additional adjustment for very small screens */
@media (max-width: 480px) {
    .description-title {
        font-size: 1.3rem !important;
    }
    
    .description-item h3 {
        font-size: 1rem !important;
    }
    
    .description-item p {
        font-size: 0.85rem !important;
    }
    
    .description-section {
        padding: 15px 12px;
    }
}

/* Add this to your existing mobile media queries */
@media (max-width: 768px) {
    .description-title {
        margin-top: 15px !important; /* Added top margin */
        margin-bottom: 20px !important;
    }
}

/* Add this to your existing mobile media queries */
@media (max-width: 768px) {
    .submit-btn {
        margin: 30px auto 20px !important; /* Increased bottom margin */
    }
}

/* Add this to your existing mobile media queries */
@media (max-width: 768px) {
    .info-text {
        font-size: 14px !important;
    }
    
    .info-icon {
        font-size: 20px !important;
    }
}

/* For very small screens */
@media (max-width: 480px) {
    .info-text {
        font-size: 13px !important;
    }
    
    .info-icon {
        font-size: 18px !important;
    }
}
        
</style>

<style>
/* Upgrade Modal Styles - Compact Version */
.upgrade-modal {
  display: none;
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.6);
  backdrop-filter: blur(5px);
  align-items: center;
  justify-content: center;
  z-index: 2000;
  padding: 15px;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.upgrade-modal.show {
  display: flex;
  opacity: 1;
}

.upgrade-modal-content {
  background: white;
  border-radius: 18px;
  padding: 25px;
  width: 100%;
  max-width: 800px;
  box-shadow: 0 20px 40px -10px rgba(0, 0, 0, 0.2);
  position: relative;
  transform: translateY(20px);
  transition: transform 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.upgrade-modal.show .upgrade-modal-content {
  transform: translateY(0);
}

.upgrade-header {
  text-align: center;
  margin-bottom: 20px;
  position: relative;
}

.upgrade-icon {
  width: 60px;
  height: 60px;
  margin: 0 auto 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
  border-radius: 50%;
  color: white;
  font-size: 26px;
}

.upgrade-header h2 {
  font-size: 24px;
  font-weight: 700;
  color: var(--dark);
  margin-bottom: 8px;
}

.upgrade-header p {
  color: var(--text-light);
  font-size: 14px;
  max-width: 500px;
  margin: 0 auto;
}

.close-modal {
  position: absolute;
  top: -10px;
  right: -10px;
  width: 36px;
  height: 36px;
  border-radius: 50%;
  background: #f1f5f9;
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  font-size: 22px;
  color: var(--text-light);
  transition: var(--transition);
}

.close-modal:hover {
  background: #e2e8f0;
  color: var(--dark);
}

.plans-container {
  position: relative;
  margin-bottom: 25px;
}

/* Desktop layout - 3 columns */
.plans-carousel {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 15px;
}

.plan-card {
  background: white;
  border-radius: 14px;
  padding: 20px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.07);
  border: 1px solid var(--border);
  position: relative;
  transition: var(--transition);
  display: flex;
  flex-direction: column;
}

.plan-card:hover {
  transform: translateY(-3px);
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
}

.plan-card.featured {
  border: 2px solid var(--primary);
  transform: scale(1.02);
  z-index: 1;
}

.plan-card.featured:hover {
  transform: scale(1.02) translateY(-3px);
}

.plan-popular-tag {
  position: absolute;
  top: -8px;
  left: 50%;
  transform: translateX(-50%);
  background: linear-gradient(to right, var(--secondary), #06b6d4);
  color: white;
  padding: 4px 12px;
  border-radius: 16px;
  font-size: 11px;
  font-weight: 600;
}

.plan-header {
  text-align: center;
  margin-bottom: 15px;
  padding-bottom: 15px;
  border-bottom: 1px solid var(--border);
}

.plan-header h3 {
  font-size: 16px;
  font-weight: 600;
  color: var(--dark);
  margin-bottom: 12px;
}

.plan-price {
  display: flex;
  align-items: baseline;
  justify-content: center;
  gap: 4px;
}

.currency {
  font-size: 18px;
  font-weight: 600;
  color: var(--primary);
}

.amount {
  font-size: 32px;
  font-weight: 700;
  color: var(--primary);
  line-height: 1;
}

.save-tag {
  background: rgba(6, 214, 160, 0.15);
  color: #06a17e;
  padding: 3px 6px;
  border-radius: 5px;
  font-size: 11px;
  font-weight: 600;
  margin-left: 6px;
}

.plan-features {
  flex-grow: 1;
  margin-bottom: 20px;
}

.feature {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
  font-size: 13px;
}

.feature i {
  color: var(--secondary);
  font-size: 16px;
  margin-right: 8px;
}

.plan-select-btn {
  background: linear-gradient(to right, var(--primary), var(--primary-dark));
  color: white;
  border: none;
  border-radius: 10px;
  padding: 10px;
  font-weight: 600;
  font-size: 14px;
  cursor: pointer;
  transition: var(--transition);
  margin-top: auto;
}

.plan-select-btn:hover {
  background: linear-gradient(to right, var(--primary-dark), #2f44c0);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(67, 97, 238, 0.3);
}

.featured-btn {
  background: linear-gradient(to right, var(--secondary), #06b6d4);
}

.featured-btn:hover {
  background: linear-gradient(to right, #06b6d4, #059bb4);
}

/* Carousel navigation dots - hidden on desktop */
.carousel-dots {
  display: none;
  justify-content: center;
  margin-top: 20px;
  gap: 10px;
}

.dot {
  width: 10px;
  height: 10px;
  border-radius: 50%;
  background: #ddd;
  cursor: pointer;
  transition: var(--transition);
}

.dot.active {
  background: var(--primary);
  transform: scale(1.2);
}

/* Carousel navigation arrows - hidden on desktop */
.carousel-arrow {
  display: none;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: white;
  border: 1px solid var(--border);
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  cursor: pointer;
  z-index: 10;
  align-items: center;
  justify-content: center;
  font-size: 20px;
  color: var(--primary);
  transition: var(--transition);
}

.carousel-arrow:hover {
  background: var(--primary);
  color: white;
}

.carousel-prev {
  left: -20px;
}

.carousel-next {
  right: -20px;
}

.upgrade-footer {
  text-align: center;
  padding-top: 15px;
  border-top: 1px solid var(--border);
}

.upgrade-footer p {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  color: var(--text-light);
  font-size: 13px;
}

.upgrade-footer i {
  color: var(--secondary);
}

/* Turns Pill Enhancement */
.turns-pill {
  cursor: pointer;
  transition: var(--transition);
}

.turns-pill:hover {
  transform: scale(1.05);
}

.turns-pill {
  display: inline-flex;
  align-items: center;
  gap: 6px;
  padding: 8px 12px;
  border-radius: 999px;
  font-weight: 600;
  font-size: 14px;
  border: 1px solid var(--border);
  transition: var(--transition);
  cursor: pointer;
}

.turns-pill.zero { 
  color: #9ca3af; 
  background: #f3f4f6; 
}

.turns-pill.positive { 
  color: white; 
  background: linear-gradient(to right, var(--primary), var(--primary-dark));
  box-shadow: 0 4px 12px rgba(67, 97, 238, 0.25);
}

.turns-pill:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 16px rgba(67, 97, 238, 0.3);
}

.turns-label {
  font-size: 12px;
  opacity: 0.9;
}
@media (max-width: 768px) {
  .turns-label {
    display: none;
  }
}
/* Mobile size adjustments for turns pill to match results page */
@media (max-width:600px) {
  .turns-pill {
    padding: 4px 10px;
    font-size: 12px; /* down from 14px */
    gap: 4px;
    position: relative; top: 1px; /* nudge down to align with user name */
  }
  .turns-pill .bx, .turns-pill i {
    font-size: 16px; /* slightly smaller icon */
  }
}
/* Mobile responsive styles - IMPROVED */
@media (max-width: 900px) {
  .upgrade-modal {
    /* more top padding so floating badges have room and avoid touching viewport */
    padding: 28px 10px 18px 10px;
    align-items: flex-start;
    overflow: visible !important; /* allow badges to overflow without being clipped */
  }
  
  .upgrade-modal-content {
    margin: auto;
    max-width: 100%;
    width: 100%;
    transform: none;
    padding: 20px 15px;
    border-radius: 16px;
    overflow: visible; /* allow floating badges to show */
    z-index: 2100; /* be in front of overlay */
  }
  
  .upgrade-modal.show .upgrade-modal-content {
    transform: none;
  }
  
  /* tighten spacing under header on mobile */
  .upgrade-header { margin-bottom: 0px; }
  .upgrade-header p { margin-bottom: 0; }
  
  .plans-carousel {
    display: flex;
    overflow-x: auto;
    overflow-y: visible; /* allow badges to overflow vertically without being clipped */
    scroll-snap-type: x mandatory;
    scroll-behavior: smooth;
    -webkit-overflow-scrolling: touch;
    scroll-padding: 0 15px;
  /* reduce top padding to bring carousel closer to subtitle, while keeping badge visible */
  padding: 18px 0 10px;
    margin: 0 -15px;
    gap: 0;
  }
  
  .plan-card {
    flex: 0 0 85%;
    scroll-snap-align: center;
    margin: 0 7.5%;
    opacity: 0.7;
    transform: scale(0.95);
    transition: all 0.3s ease;
    overflow: visible; /* ensure badge isn't clipped */
  }
  
  .plan-card.active {
    opacity: 1;
    transform: scale(1);
  }
  
  .plan-card.featured {
    transform: scale(0.97);
  }
  
  .plan-card.featured.active {
    transform: scale(1);
  }
  
  /* Float the popular badge outside the card (on the boundary) and ensure it's visible */
  .plans-container { overflow: visible; padding-top: 22px; }
  .plan-card { padding-top: 24px; }
  .plan-popular-tag { z-index: 99999; top: -14px; left: 50%; transform: translateX(-50%); box-shadow: 0 8px 18px rgba(0,0,0,0.14); }
  /* Center the badge on mobile */
  .plan-popular-tag { z-index: 99999; top: -22px; left: 50%; transform: translateX(-50%); box-shadow: 0 8px 18px rgba(0,0,0,0.14); }

  /* Show carousel navigation on mobile */
  .carousel-dots {
    display: flex;
    margin-top: 15px;
  }
  
  .carousel-arrow {
    display: none !important;
  }
  
  .close-modal {
    top: 5px;
    right: 5px;
    width: 32px;
    height: 32px;
  }
}

@media (max-width: 480px) {
  .upgrade-modal-content {
    padding: 18px 12px;
  }
  
  .plan-card {
    flex: 0 0 90%;
    margin: 0 5%;
    padding: 16px;
  }
  
  .upgrade-header h2 {
    font-size: 22px;
    padding: 0 10px;
  }
  
  .upgrade-header p {
    padding: 0 5px;
  }
  
  .amount {
    font-size: 28px;
  }

  /* fine tune for very small screens: center badge, ensure spacing under it, and reduce top gap */
  .plans-container { padding-top: 14px; }
  .plan-popular-tag { top: -12px; left: 50%; transform: translateX(-50%); font-size: 12px; padding: 6px 14px; }
  .plan-card { padding-top: 22px; }
  /* slightly reduced top padding to minimize gap but keep badge visible */
  .plans-carousel { padding-top: 16px; }
}

/* Prevent body scrolling when modal is open */
body.modal-open {
  overflow: hidden;
  position: fixed;
  width: 100%;
}
</style>

</head>
<body>
    <!-- Decorative Elements -->
    <div class="decoration decoration-1"></div>
    <div class="decoration decoration-2"></div>

    <!-- Header -->
    <header>
    <div class="header-content">
      <div class="header-logo">
                   <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100">
                        <circle cx="50" cy="50" r="48" fill="#4361ee" opacity="0.1"/>
                        <path d="M50 15 L75 40 L70 75 L30 75 L25 40 Z" fill="#4361ee"/>
                        <circle cx="50" cy="35" r="12" fill="#06d6a0"/>
                        <circle cx="50" cy="60" r="7" fill="white"/>
                    </svg>
      </div>
            <div style="display:flex; align-items:center; gap:12px;">
                <% if (typeof user !== 'undefined' && user) { %>
                    <!-- Replace the turns-pill section in your header with this -->
<div class="turns-pill <%= (user.paid_turns && user.paid_turns>0) ? 'positive' : 'zero' %>" id="turns-pill">
  <i class='bx bx-coin-stack' style="font-size:16px;color:inherit"></i>
  <span id="turns-count"><%= (user.paid_turns || 0) %></span>
  <span class="turns-label">Turns</span>
</div>
                <% } %>
                <div class="user-info">
        <% if (typeof user !== 'undefined' && user) { %>
          <span class="user-name"><span class="user-realname"><%= user.name || user.displayName || user.email %></span></span>
          <a href="/logout" class="logout-btn"><i class='bx bx-log-out'></i> Logout</a>
        <% } else { %>
          <a href="/login" class="logout-btn"><i class='bx bx-log-in'></i> Login</a>
        <% } %>
                </div>
            </div>
    </div>
  </header>

        <script>
    // Initialize paid turns for header by querying server (authoritative). Do NOT use localStorage for the value.
    window.__USER_PAID = <%= user && typeof user.paid_turns !== 'undefined' ? user.paid_turns : 0 %>;
    (async function(){
        try {
            const resp = await fetch('/user/paid-turns', { method: 'GET', credentials: 'same-origin' });
            if (resp.ok) {
                const data = await resp.json();
                const val = Number(data.paid_turns || 0);
                window.__USER_PAID = val;
                const pill = document.getElementById('turns-count');
                if (pill) pill.textContent = val;
                const parent = document.getElementById('turns-pill');
                if (parent) { parent.classList.toggle('positive', val>0); parent.classList.toggle('zero', val<=0); }
            }
        } catch(e) {
            console.warn('Unable to fetch paid turns from server, falling back to server-rendered value');
        }
    })();
</script>

    <!-- Main Container -->
    <div class="container">
        <!-- Back Navigation -->
        

        <!-- Hero Section -->
        <div class="hero">
            <div class="hero-logo">
                <svg xmlns="http://www.w3.org/2000/svg" width="70" height="70" viewBox="0 0 100 100">
                    <circle cx="50" cy="50" r="48" fill="#4361ee" opacity="0.1"/>
                    <path d="M50 20 L70 40 L65 70 L35 70 L30 40 Z" fill="#4361ee"/>
                    <circle cx="50" cy="35" r="8" fill="#06d6a0"/>
                    <circle cx="50" cy="55" r="5" fill="white"/>
                </svg>
            </div>
            <h1 class="hero-title">College Preferencer</h1>
            <div class="hero-tag">
                <i class='bx bx-check-circle'></i> No Hidden Charges, 100% Free
            </div>
            <!-- marketing line removed from index page; shown only inside upgrade modal -->
        </div>

        <!-- Form Container -->
        <form action="/search" method="POST" class="form-container">
            <!-- Rank/Domicile/Caste Row -->
            <div class="form-grid">
                <div class="form-group">
                    <label class="form-label" for="rank">JEE Main Rank:</label>
                    <input type="number" id="rank" name="rank" class="form-input" required>
                </div>
                <div class="form-group">
                    <label class="form-label" for="domicile">Domicile:
                        <a href="#domicile-desc" class="info-anchor"><i class='bx bx-info-circle'></i></a>
                    </label>
                    <select id="domicile" name="domicile" class="form-select" onchange="handleDomicileChange()" required>
                        <option value='AI'>All India</option>
                        <option value='Y'>MP Resident</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label" for="caste">Caste:</label>
                    <select id="caste" name="caste" class="form-select" onchange="handleCasteChange()" required></select>
                </div>
            </div>

            <!-- Class/Gender/Categories Row -->
            <div class="form-grid">
                <div class="form-group" id="class-container">
                    <label class="form-label" for="class">Class:</label>
                    <select id="class" name="class" class="form-select">
                        <option value='X'>NILL (X)</option>
                        <option value='H'>Handicapped (H)</option>
                        <option value='S'>Sainik (S)</option>
                        <option value='NCC'>NCC</option>
                        <option value='FF'>Freedom Fighter (FF)</option>
                    </select>
                </div>
                <div class="form-group" id="gender-container">
                    <label class="form-label" for="gender">Gender:</label>
                    
                    <select id="gender" name="gender" class="form-select">
                        <option value='OP'>Open (OP)</option>
                        <option value='F'>Female (F)</option>
                    </select>
                   
                </div>
                <div class="form-group">
                    <label class="form-label">Select Categories:
                        <a href="#categories-desc" class="info-anchor"><i class='bx bx-info-circle'></i></a>
                    </label>
                    <div class="dropdown">
                        <button type="button" class="dropdown-btn" onclick="toggleDropdown('categoryDropdown')">
                            Select Categories <i class='bx bx-chevron-down'></i>
                        </button>
                        <div id="categoryDropdown" class="dropdown-content">
                            <div id="categoryCheckboxes"></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Rank Range/Sort By/Round (visible by default) -->
            <div class="form-grid">
                <div class="form-group">
                    <label class="form-label" for="rank_range">Rank Range:
                        <a href="#rankrange-desc" class="info-anchor"><i class='bx bx-info-circle'></i></a>
                    </label>

<select name="rank_range" id="rank_range" class="form-select">
    <option value="10000000">Start To End</option>
    <option value="500000">±5 lakh</option>
    <option value="200000">±2 lakh</option>
    <option value="100000" selected>±1 lakh</option>
    <option value="50000">±50k</option>
    <option value="20000">±20k</option>
    <option value="10000">±10k</option>
</select>
                </div>
                <div class="form-group">
                    <label class="form-label" for="sort_by">Sort By:
                        <a href="#sortby-desc" class="info-anchor"><i class='bx bx-info-circle'></i></a>
                    </label>
                    <select id="sort_by" name="sort_by" class="form-select">
                        <option value="lastYearTrend">5-Year Average Trend</option>
                        <option value="closing_rank">Last Year Trend</option>
                        <option value="opening_rank">Opening Rank</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label" for="round">Round:</label>
                    <select id="round" name="round" class="form-select">
                        <option value="FIRST">FIRST</option>
                        <option value="UPGRADE">UPGRADE</option>
                        <option value="SECOND">SECOND</option>
                        <option value="FIRST&UPGRADE">FIRST & UPGRADE</option>
                    </select>
                </div>
            </div>
            <!-- Advanced toggle button -->
            <div id="advanced-filters-toggle" style="text-align:center; margin-bottom:12px;">
                <button type="button" id="show-advanced-btn" class="filter-btn">Show Advanced Filters</button>
            </div>
            <div id="advanced-filters" class="advanced-box">
                <!-- Institute Type/City Row (advanced) -->
                <div class="form-grid">
                    <div class="form-group">
                        <label class="form-label">Institute Type:</label>
                        <div class="checkbox-grid">
                            <div class="checkbox-item">
                                <input type="checkbox" name="institute_type" value="PRIVATE" class="institute-checkbox" checked onchange="checkInstituteTypes()">
                                <label>Private</label>
                            </div>
                            <div class="checkbox-item">
                                <input type="checkbox" name="institute_type" value="GOVT" class="institute-checkbox" checked onchange="checkInstituteTypes()">
                                <label>Government</label>
                            </div>
                            <div class="checkbox-item">
                                <input type="checkbox" name="institute_type" value="S.F.I." class="institute-checkbox" checked onchange="checkInstituteTypes()">
                                <label>Self-Financed Institute</label>
                            </div>
                            <div class="checkbox-item">
                                <input type="checkbox" name="institute_type" value="AIDED" class="institute-checkbox" checked onchange="checkInstituteTypes()">
                                <label>Government Aided</label>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Select City/Cities:</label>
                        <div class="dropdown">
                            <button type="button" class="dropdown-btn" onclick="toggleDropdown('cityDropdown')">
                                Select Cities <i class='bx bx-chevron-down'></i>
                            </button>
                            <div id="cityDropdown" class="dropdown-content">
                                <div id="cityCheckboxes"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- College/Branch Row (advanced) -->
                <div class="form-grid">
                    <div class="form-group">
                        <label class="form-label">College Name:</label>
                        <div class="dropdown">
                            <button type="button" class="dropdown-btn" onclick="toggleDropdown('collegeDropdown')">
                                Select Colleges <i class='bx bx-chevron-down'></i>
                            </button>
                            <div id="collegeDropdown" class="dropdown-content">
                                <div id="collegeCheckboxes"></div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Select Branch/Branches:</label>
                        <div class="dropdown">
                            <button type="button" class="dropdown-btn" onclick="toggleDropdown('branchDropdown')">
                                Select Branches <i class='bx bx-chevron-down'></i>
                            </button>
                            <div id="branchDropdown" class="dropdown-content">
                                <div id="branchCheckboxes"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Submit Button -->
            <button type="submit" class="submit-btn">Search Colleges</button>
        </form>

    <!-- Info Box -->
        <div class="info-box">
            <i class='bx bx-info-circle info-icon'></i>
            <p class="info-text">Fill all the fields above to get personalized college recommendations based on your JEE Mains rank and preferences.</p>
        </div>

        <!-- Description Section -->
        <div class="description-section">
            <h2 class="description-title">Understanding Your Filters</h2>
            <div class="description-grid">
                <div class="description-item" id="domicile-desc">
                    <h3><i class='bx bx-map'></i> Domicile</h3>
                    <p>Select "MP Resident" if you have permanent residency in Madhya Pradesh. Choose "All India" if you're from any other state or union territory. This helps identify colleges with regional quotas that may offer you admission advantages.</p>
                </div>
                
                <div class="description-item" id="categories-desc">
                    <h3><i class='bx bx-category'></i> Select Categories</h3>
                    <p>Some colleges (particularly private institutions) may not offer specific quotas for reserved categories like OBC, EWS, SC, ST, or Female candidates. In such cases, students from these categories are considered under the Unreserved (UR) category. Selecting multiple categories ensures you see all possible options available to you. If any college has some or all the selected categories, the result will display the category whose closing rank is highest among them.</p>
                </div>
                
                <div class="description-item" id="rankrange-desc">
                    <h3><i class='bx bx-line-chart'></i> Rank Range</h3>
                    <p>Narrow down your college options based on how close they are to your JEE Main rank. For example, selecting ±20k will show colleges with closing ranks between [Your Rank - 20,000] and [Your Rank + 20,000]. Choose "Start To End" to see all available options regardless of your rank.</p>
                </div>
                
                <div class="description-item" id="sortby-desc">
                    <h3><i class='bx bx-sort'></i> Sort By</h3>
                    <p>Organize your results based on different criteria. The 5-Year Average Trend analyzes cutoffs from the past five years and displays results according to the average closing rank, giving a more stable picture of admission patterns. The Last Year Trend focuses only on the closing rank from the most recent year, highlighting the latest admission scenario. Meanwhile, the Opening Rank shows results based on the lowest rank admitted in the most recent year, helping you understand the earliest admissions cutoffs.</p>
                </div>
            </div>
        </div>

        <div class="footer">
            <p>&copy; 2025 College Preferencer. All rights reserved.</p>
        </div>
    </div>

    <script>
        // ==========================================
        // DOMICILE & CASTE HANDLING
        // ==========================================
        function handleDomicileChange() {
            const domicile = document.getElementById('domicile').value;
            const casteSelect = document.getElementById('caste');
            casteSelect.innerHTML = '';

            if (domicile === 'AI') {
                casteSelect.options.add(new Option('EWS', 'EWS'));
                casteSelect.options.add(new Option('OBC', 'OBC'));
                casteSelect.options.add(new Option('SC', 'SC'));
                casteSelect.options.add(new Option('ST', 'ST'));
                casteSelect.options.add(new Option('UR (Unreserved)', 'UR'));
                casteSelect.options.add(new Option('FW (Fee wavier)', 'FW'));
                casteSelect.options.add(new Option('JKM (Jammu & Kashmir Migrants)', 'JKM'));
                casteSelect.options.add(new Option('JKR (Jammu & Kashmir Residents)', 'JKR'));
                casteSelect.options.add(new Option('NTPC', 'NTPC'));
            } else {
                casteSelect.options.add(new Option('EWS', 'EWS'));
                casteSelect.options.add(new Option('OBC', 'OBC'));
                casteSelect.options.add(new Option('SC', 'SC'));
                casteSelect.options.add(new Option('ST', 'ST'));
                casteSelect.options.add(new Option('UR (Unreserved)', 'UR'));
                casteSelect.options.add(new Option('FW (Fee wavier)', 'FW'));
            }
            handleCasteChange();
        }

        function handleCasteChange() {
            const caste = document.getElementById('caste').value;
            const classContainer = document.getElementById('class-container');
            const genderContainer = document.getElementById('gender-container');

            if (caste === 'EWS' || caste === 'NTPC' || caste === 'JKM' || caste === 'JKR') {
                classContainer.style.display = 'none';
                genderContainer.style.display = 'none';
            } else if (caste === 'FW') {
                classContainer.style.display = 'none';
                genderContainer.style.display = 'block';
            } else {
                classContainer.style.display = 'block';
                genderContainer.style.display = 'block';
            }
        }

        // ==========================================
        // DROPDOWN TOGGLES
        // ==========================================
        function toggleDropdown(dropdownId) {
            const dropdown = document.getElementById(dropdownId);
            dropdown.classList.toggle('show');
            const btn = document.querySelector(`[onclick="toggleDropdown('${dropdownId}')"]`);
            const icon = btn.querySelector('i');
            if (dropdown.classList.contains('show')) {
                icon.className = 'bx bx-chevron-up';
            } else {
                icon.className = 'bx bx-chevron-down';
            }
        }

        // Close dropdowns when clicking outside
        window.onclick = function(event) {
            if (!event.target.matches('.dropdown-btn')) {
                const dropdowns = document.getElementsByClassName('dropdown-content');
                for (let i = 0; i < dropdowns.length; i++) {
                    const openDropdown = dropdowns[i];
                    if (openDropdown.classList.contains('show')) {
                        if (!openDropdown.contains(event.target)) {
                            openDropdown.classList.remove('show');
                            const btn = document.querySelector(`[onclick="toggleDropdown('${openDropdown.id}')"]`);
                            if (btn) {
                                const icon = btn.querySelector('i');
                                icon.className = 'bx bx-chevron-down';
                            }
                        }
                    }
                }
            }
        }

        // ==========================================
        // CATEGORY HANDLING
        // ==========================================
        function generateCategoryCheckboxes(categories) {
            const container = document.getElementById('categoryCheckboxes');
            container.innerHTML = '';
            
            // Only one 'All' row, with partition line below
            const allRow = document.createElement('div');
            allRow.className = 'dropdown-option';

            const selectAll = document.createElement('input');
            selectAll.type = 'checkbox';
            selectAll.id = 'select_all_categories';
            selectAll.className = 'select-all';

            const allLabel = document.createElement('label');
            allLabel.htmlFor = selectAll.id;
            allLabel.className = 'ml-2';
            allLabel.textContent = 'All';
            // Make label clickable to toggle checkbox
            allLabel.addEventListener('click', function(e) {
                selectAll.checked = !selectAll.checked;
                selectAll.dispatchEvent(new Event('change'));
            });

            allRow.appendChild(selectAll);
            allRow.appendChild(allLabel);
            container.appendChild(allRow);

            // Partition line below 'All'
            const divider = document.createElement('div');
            divider.style.borderBottom = '1px solid var(--border)';
            divider.style.margin = '8px 0 8px 0';
            container.appendChild(divider);
            
            categories.forEach(category => {
                const option = document.createElement('div');
                option.className = 'dropdown-option';
            
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.name = 'selectedCategories';
                checkbox.value = category;
                checkbox.id = `category_${category}`;
                checkbox.classList.add('category-checkbox');
                checkbox.checked = true;
            
                const label = document.createElement('label');
                label.htmlFor = checkbox.id;
                label.textContent = category;
                label.className = 'ml-2';
                // Make label clickable to toggle checkbox
                label.addEventListener('click', function(e) {
                    checkbox.checked = !checkbox.checked;
                    checkbox.dispatchEvent(new Event('change'));
                });

                option.appendChild(checkbox);
                option.appendChild(label);
                container.appendChild(option);
            });
            initializeSelectAllCategories();
        }

        function toggleAllCategories(checkbox) {
            const categoryCheckboxes = document.querySelectorAll('.category-checkbox');
            categoryCheckboxes.forEach(cb => {
                cb.checked = checkbox.checked;
                const event = new Event('change');
                cb.dispatchEvent(event);
            });
        }

        function initializeSelectAllCategories() {
            const selectAllCategoriesCheckbox = document.getElementById('select_all_categories');
            const categoryCheckboxes = document.querySelectorAll('.category-checkbox');
            let isSelectAllTriggered = false;

            const unchecked = Array.from(categoryCheckboxes).some(cb => !cb.checked);
            if (!unchecked) {
                selectAllCategoriesCheckbox.checked = true;
            }

            selectAllCategoriesCheckbox.addEventListener('change', function() {
                isSelectAllTriggered = true;
                toggleAllCategories(this);
                isSelectAllTriggered = false;
            });

            categoryCheckboxes.forEach(cb => {
                cb.addEventListener('change', function() {
                    if (!this.checked) {
                        selectAllCategoriesCheckbox.checked = false;
                    } else {
                        const unchecked = Array.from(categoryCheckboxes).some(cb => !cb.checked);
                        if (!unchecked) {
                            selectAllCategoriesCheckbox.checked = true;
                        }
                    }

                    const checkedCount = Array.from(categoryCheckboxes).filter(chk => chk.checked).length;
                    if (checkedCount === 0 && !isSelectAllTriggered) {
                        // Instead of popup, always keep at least one checked
                        this.checked = true;
                    }
                });
            });

            selectAllCategoriesCheckbox.addEventListener('change', function() {
                if (!this.checked) {
                    const firstCheckbox = document.querySelector('.category-checkbox');
                    if (firstCheckbox) {
                        categoryCheckboxes.forEach(cb => cb.checked = false);
                        firstCheckbox.checked = true;
                        const event = new Event('change');
                        firstCheckbox.dispatchEvent(event);
                    }
                }
            });
        }

        function updateCategories() {
            const caste = document.getElementById('caste').value || 'EWS';
            const classType = document.getElementById('class').value || '';
            const gender = document.getElementById('gender').value || '';

            fetch(`/generate-categories?caste=${caste}&class=${classType}&gender=${gender}`)
                .then(response => response.json())
                .then(data => {
                    generateCategoryCheckboxes(data.categories);
                })
                .catch(error => console.error('Error fetching categories:', error));
        }

        // ==========================================
        // INSTITUTE TYPE HANDLING
        // ==========================================
        function checkInstituteTypes() {
            const checkboxes = document.querySelectorAll('.institute-checkbox');
            const checkedCount = Array.from(checkboxes).filter(checkbox => checkbox.checked).length;
        
            if (checkedCount === 0) {
                alert('At least one option should be selected!');
                checkboxes[0].checked = true;
            }
        }

// Use the same, unified behavior for cities, colleges, and branches

// Generic renderer to build identical dropdown content for any group
// groupKey: 'city' | 'college_name' | 'branch'
function renderGroupOptions(groupKey, items) {
    let checkboxesContainer;
    if (groupKey === 'city') {
        checkboxesContainer = document.getElementById('cityCheckboxes');
    } else if (groupKey === 'college_name') {
        checkboxesContainer = document.getElementById('collegeCheckboxes');
    } else if (groupKey === 'branch') {
        checkboxesContainer = document.getElementById('branchCheckboxes');
    }
    checkboxesContainer.innerHTML = '';

    // Only one 'All' row, with partition line below
    const allRow = document.createElement('div');
    allRow.className = 'dropdown-option';

    const selectAll = document.createElement('input');
    selectAll.type = 'checkbox';
    selectAll.id = `select_all_${groupKey}`;
    selectAll.className = 'select-all';
    selectAll.dataset.group = groupKey;

    const allLabel = document.createElement('label');
    allLabel.htmlFor = selectAll.id;
    allLabel.className = 'ml-2';
    allLabel.textContent = 'All';
    // Make label clickable to toggle checkbox
    allLabel.addEventListener('click', function(e) {
        selectAll.checked = !selectAll.checked;
        selectAll.dispatchEvent(new Event('change'));
    });

    allRow.appendChild(selectAll);
    allRow.appendChild(allLabel);
    checkboxesContainer.appendChild(allRow);

    // Partition line below 'All'
    const divider = document.createElement('div');
    divider.style.borderBottom = '1px solid var(--border)';
    divider.style.margin = '8px 0 8px 0';
    checkboxesContainer.appendChild(divider);

    items.forEach(value => {
        const row = document.createElement('div');
        row.className = 'dropdown-option';

        const cb = document.createElement('input');
        cb.type = 'checkbox';
        cb.name = `${groupKey}[]`;
        cb.value = value;
        cb.className = `${groupKey}-checkbox option-checkbox`;
        cb.checked = true;

        const label = document.createElement('label');
        label.className = 'ml-2';
        label.textContent = value;
        label.htmlFor = cb.id = `${groupKey}_${value.replace(/\s+/g, '_')}`;
        // Make label clickable to toggle checkbox
        label.addEventListener('click', function(e) {
            cb.checked = !cb.checked;
            cb.dispatchEvent(new Event('change'));
        });

        // Persist user changes when they toggle a generated checkbox
        cb.addEventListener('change', function() {
            try { saveFilters(); } catch (e) { /* ignore if saveFilters not yet defined */ }
        });

        row.appendChild(cb);
        row.appendChild(label);
        checkboxesContainer.appendChild(row);
    });
    // ensure select-all changes are also saved
    selectAll.addEventListener('change', function() {
        try { saveFilters(); } catch (e) { /* ignore */ }
    });
}

// Generic initializer for Select All + “at least one selected” + cascade updates
function initMultiSelect(groupKey) {
    const selectAll = document.getElementById(`select_all_${groupKey}`);
    const optionSelector = `.${groupKey}-checkbox`;
    const checkboxes = Array.from(document.querySelectorAll(optionSelector));
    let fromSelectAll = false;

    function syncSelectAll() {
        const anyUnchecked = checkboxes.some(cb => !cb.checked);
        if (selectAll) selectAll.checked = !anyUnchecked && checkboxes.length > 0;
    }

    if (selectAll) {
        selectAll.addEventListener('change', function() {
            fromSelectAll = true;
            if (this.checked) {
                checkboxes.forEach(cb => {
                    cb.checked = true;
                    cb.dispatchEvent(new Event('change'));
                });
            } else {
                // Keep exactly one selected to avoid empty state and popups
                checkboxes.forEach(cb => cb.checked = false);
                if (checkboxes[0]) {
                    checkboxes[0].checked = true;
                    checkboxes[0].dispatchEvent(new Event('change'));
                }
            }
            fromSelectAll = false;
        });
    }

    checkboxes.forEach(cb => {
        cb.addEventListener('change', function() {
            if (!this.checked) {
                if (selectAll) selectAll.checked = false;
            } else {
                syncSelectAll();
            }

            const checkedCount = checkboxes.filter(x => x.checked).length;
            if (checkedCount === 0 && !fromSelectAll) {
                alert(`At least one option must be selected.`);
                this.checked = true;
                return;
            }

            // Cascading updates
            if (groupKey === 'city') {
                updateColleges();
            } else if (groupKey === 'college_name') {
                updateBranches();
            }
        });
    });

    syncSelectAll();
}

// Helpers to read checked values
function getChecked(groupKey) {
    return Array.from(document.querySelectorAll(`input[name="${groupKey}[]"]:checked`)).map(cb => cb.value);
}

// Dynamic updates (Cities -> Colleges -> Branches), all using the unified renderer
function updateCities(instituteTypesOverride, savedCitiesOverride, savedCollegesOverride) {
    const selectedInstituteTypes = Array.isArray(instituteTypesOverride) ? instituteTypesOverride : Array.from(document.querySelectorAll('input[name="institute_type"]:checked')).map(cb => cb.value);
    if (selectedInstituteTypes.length === 0) return Promise.resolve();
    return fetch('/update-cities', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ institute_types: selectedInstituteTypes })
    })
    .then(r => r.json())
    .then(data => {
        const items = (data.cities || []).slice().sort();
        renderGroupOptions('city', items);
        // If caller provided savedCities, apply them now BEFORE wiring listeners (initMultiSelect attaches listeners)
        if (Array.isArray(savedCitiesOverride) && savedCitiesOverride.length > 0) {
            const cbInputs = Array.from(document.querySelectorAll('input[name="city[]"]'));
            const desiredNorm = savedCitiesOverride.map(s => String(s || '').trim().toLowerCase());
            cbInputs.forEach(cb => {
                try { cb.checked = desiredNorm.indexOf(String(cb.value || '').trim().toLowerCase()) !== -1; } catch(e){}
            });
        }
        initMultiSelect('city');
        // return the downstream promise so callers can wait for full cascade; pass savedCitiesOverride and savedCollegesOverride so downstream lists are filtered
        return updateColleges(savedCitiesOverride || null, selectedInstituteTypes, savedCollegesOverride || null);
    })
    .catch(err => {
        console.error('Error updating cities:', err);
        // resolve gracefully so callers don't hang
        return Promise.resolve();
    });
}

function updateColleges(citiesOverride, instituteTypesOverride, savedCollegesOverride) {
    const selectedInstituteTypes = Array.isArray(instituteTypesOverride) ? instituteTypesOverride : Array.from(document.querySelectorAll('input[name="institute_type"]:checked')).map(cb => cb.value);
    const selectedCities = Array.isArray(citiesOverride) ? citiesOverride : getChecked('city');
    if (selectedInstituteTypes.length === 0 || selectedCities.length === 0) return Promise.resolve();
    return fetch('/update-colleges', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ institute_types: selectedInstituteTypes, cities: selectedCities })
    })
    .then(r => r.json())
    .then(data => {
        const items = (data.colleges || []).slice();
        renderGroupOptions('college_name', items);
        // Apply saved colleges before wiring listeners
        if (Array.isArray(savedCollegesOverride) && savedCollegesOverride.length > 0) {
            const cbInputs = Array.from(document.querySelectorAll('input[name="college_name[]"]'));
            const desiredNorm = savedCollegesOverride.map(s => String(s || '').trim().toLowerCase());
            cbInputs.forEach(cb => {
                try { cb.checked = desiredNorm.indexOf(String(cb.value || '').trim().toLowerCase()) !== -1; } catch(e){}
            });
        }
        initMultiSelect('college_name');
        return updateBranches(savedCollegesOverride || null);
    })
    .catch(err => {
        console.error('Error updating colleges:', err);
        return Promise.resolve();
    });
}

function updateBranches(collegesOverride) {
    const selectedColleges = Array.isArray(collegesOverride) ? collegesOverride : getChecked('college_name');
    if (selectedColleges.length === 0) return Promise.resolve();
    return fetch('/update-branches', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ colleges: selectedColleges })
    })
    .then(r => r.json())
    .then(data => {
        const items = (data.branches || []).slice().sort();
        renderGroupOptions('branch', items);
        initMultiSelect('branch');
        return Promise.resolve();
    })
    .catch(err => {
        console.error('Error updating branches:', err);
        return Promise.resolve();
    });
}

// Initial render to normalize markup and behavior for all three groups
// Uses server-provided EJS data to seed consistent UI
const INITIAL = {
    cities: <%- JSON.stringify(cities) %>,
    colleges: <%- JSON.stringify(collegeNames) %>,
    branches: <%- JSON.stringify(branches.map(b => b.branch)) %>
};

document.addEventListener('DOMContentLoaded', function() {
    // Normalize the three dropdowns so they look/behave the same from the start
    renderGroupOptions('city', INITIAL.cities.slice().sort());
    initMultiSelect('city');

    renderGroupOptions('college_name', INITIAL.colleges.slice());
    initMultiSelect('college_name');

    renderGroupOptions('branch', INITIAL.branches.slice().sort());
    initMultiSelect('branch');

    // Institute type changes drive city updates
    document.querySelectorAll('input[name="institute_type"]').forEach(checkbox => {
        checkbox.addEventListener('change', updateCities);
    });

    // Initialize domicile and caste
    handleDomicileChange();

    // Initialize category checkboxes
            updateCategories();
            
            // Set up event listeners for dynamic updates
            document.getElementById('caste').addEventListener('change', updateCategories);
            document.getElementById('class').addEventListener('change', updateCategories);
            document.getElementById('gender').addEventListener('change', updateCategories);
            document.getElementById('domicile').addEventListener('change', updateCategories);

        

            // Attach institute type listeners
            document.querySelectorAll('input[name="institute_type"]').forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    updateCities();
                });
            });

            
        });
        
        // Convert native select.form-select elements into the same rounded dropdown UI used elsewhere
        // This preserves the original <select> (kept hidden) so form submission and existing JS continue to work.
        function convertSelects() {
            const selects = Array.from(document.querySelectorAll('select.form-select')).filter(s => !s.dataset.converted);
            selects.forEach(sel => {
                // mark converted
                sel.dataset.converted = 'true';
                // hide original select but keep in DOM for form submit
                sel.style.position = 'absolute';
                sel.style.left = '-9999px';

                // build wrapper
                const wrapper = document.createElement('div');
                wrapper.className = 'dropdown converted-select-wrapper';

                const btn = document.createElement('button');
                btn.type = 'button';
                btn.className = 'dropdown-btn';

                const labelSpan = document.createElement('span');
                labelSpan.className = 'converted-select-label';

                const icon = document.createElement('i');
                icon.className = 'bx bx-chevron-down';

                btn.appendChild(labelSpan);
                btn.appendChild(icon);

                const content = document.createElement('div');
                content.className = 'dropdown-content';

                function updateBtnLabel() {
                    const opt = sel.options[sel.selectedIndex];
                    labelSpan.textContent = opt ? opt.text : '';
                }

                function rebuildOptions() {
                    content.innerHTML = '';
                    Array.from(sel.options).forEach(opt => {
                        const row = document.createElement('div');
                        row.className = 'dropdown-option';
                        row.textContent = opt.text;
                        row.dataset.value = opt.value;
                        row.addEventListener('click', function(e) {
                            sel.value = opt.value;
                            sel.dispatchEvent(new Event('change', { bubbles: true }));
                            updateBtnLabel();
                            content.classList.remove('show');
                            icon.className = 'bx bx-chevron-down';
                        });
                        content.appendChild(row);
                    });
                }

                // wire interactions
                btn.addEventListener('click', function(e) {
                    e.stopPropagation();
                    content.classList.toggle('show');
                    icon.className = content.classList.contains('show') ? 'bx bx-chevron-up' : 'bx bx-chevron-down';
                });

                document.addEventListener('click', function(e) {
                    if (!wrapper.contains(e.target)) {
                        if (content.classList.contains('show')) {
                            content.classList.remove('show');
                            icon.className = 'bx bx-chevron-down';
                        }
                    }
                });

                // place wrapper into DOM and attach original select inside it (keeps form structure)
                sel.parentNode.insertBefore(wrapper, sel);
                wrapper.appendChild(btn);
                wrapper.appendChild(content);
                wrapper.appendChild(sel);

                // observe option list changes so dynamic updates (like caste) update the UI
                const mo = new MutationObserver(function() {
                    rebuildOptions();
                    updateBtnLabel();
                });
                mo.observe(sel, { childList: true, subtree: true });

                // reflect selection changes
                sel.addEventListener('change', updateBtnLabel);

                // initial build
                rebuildOptions();
                updateBtnLabel();
            });
        }

        // run conversion after initial page setup
        convertSelects();

        // Persist and restore filters using localStorage so "Back to Search" and "Search Again" keep selections
        const FORM_KEY = 'pf_filters_v1';

        // Save form data. Normalize keys by stripping trailing [] so checkbox groups like 'city[]'
        // are stored under 'city' which makes restoration simpler.
        function saveFilters() {
            const form = document.querySelector('.form-container');
            const data = {};
            new FormData(form).forEach((v, k) => {
                // normalize 'city[]' -> 'city'
                const key = String(k).replace(/\[\]$/, '');
                if (data[key]) {
                    if (Array.isArray(data[key])) data[key].push(v); else data[key] = [data[key], v];
                } else data[key] = v;
            });
            localStorage.setItem(FORM_KEY, JSON.stringify(data));
        }

        async function restoreFilters() {
            const raw = localStorage.getItem(FORM_KEY);
            if (!raw) return;
            const data = JSON.parse(raw);
            const form = document.querySelector('.form-container');

            // Apply non-dependent fields (including institute_type) first so dynamic lists are requested
            Object.keys(data).forEach(k => {
                // defer advanced groups (support both normalized and bracketed keys)
                if (k === 'city' || k === 'city[]' || k === 'college_name' || k === 'college_name[]' || k === 'branch' || k === 'branch[]') return;
                const val = data[k];
                const els = form.querySelectorAll(`[name="${k}"]`);
                if (!els || els.length === 0) return;
                try {
                    if (els[0].type === 'checkbox') {
                        const arr = Array.isArray(val) ? val : [val];
                        els.forEach(el => {
                            el.checked = arr.indexOf(el.value) !== -1;
                            el.dispatchEvent(new Event('change'));
                        });
                    } else if (els[0].tagName === 'SELECT' || els[0].type === 'text' || els[0].type === 'number') {
                        els[0].value = Array.isArray(val) ? val[0] : val;
                        els[0].dispatchEvent(new Event('change'));
                    }
                } catch (e) { /* ignore */ }
            });

            // Trigger dynamic population (cities -> colleges -> branches) based on applied institute_type
            try {
                // If institute_type was saved, pass it through so server filtering happens deterministically.
                const savedInstituteTypes = data['institute_type'] || data['institute_type[]'] || null;
                const instituteTypesArr = savedInstituteTypes ? (Array.isArray(savedInstituteTypes) ? savedInstituteTypes : [savedInstituteTypes]) : null;
                // Also thread saved cities/colleges so downstream fetches respect the user's saved selections
                const savedCities = data['city'] || data['city[]'] || null;
                const savedCitiesArr = savedCities ? (Array.isArray(savedCities) ? savedCities : [savedCities]) : null;
                const savedColleges = data['college_name'] || data['college_name[]'] || null;
                const savedCollegesArr = savedColleges ? (Array.isArray(savedColleges) ? savedColleges : [savedColleges]) : null;
                await updateCities(instituteTypesArr, savedCitiesArr, savedCollegesArr);
            } catch (e) { /* function may not yet be ready */ }

            // Re-apply saved advanced selections when their checkbox inputs appear. Use short retry loop.
            // Support both normalized keys ('city') and legacy bracketed keys ('city[]') for backward compatibility.
            const advancedGroups = ['city', 'college_name', 'branch'];
            advancedGroups.forEach(groupKey => {
                const saved = data[groupKey] || data[`${groupKey}[]`];
                if (!saved) return;
                const desired = Array.isArray(saved) ? saved : [saved];

                let attempts = 0;
                const maxAttempts = 20; // allow slightly longer for slow networks
                const interval = 150;
                const tryApply = () => {
                    attempts++;
                    const checkboxes = Array.from(document.querySelectorAll(`input[name="${groupKey}[]"]`));
                    if (checkboxes.length > 0) {
                        // perform tolerant matching: trim + toLowerCase for saved vs DOM values
                        const desiredNorm = desired.map(s => String(s || '').trim().toLowerCase());
                        checkboxes.forEach(cb => {
                            try {
                                const valNorm = String(cb.value || '').trim().toLowerCase();
                                const should = desiredNorm.indexOf(valNorm) !== -1;
                                cb.checked = should;
                            } catch (e) {}
                        });
                        // persist the restored choices
                        try { saveFilters(); } catch (e) { /* ignore */ }
                        // sync select-all checkbox if present WITHOUT firing its change handler (that would
                        // override individual selections). Set the checked state directly.
                        const selectAll = document.getElementById(`select_all_${groupKey}`);
                        if (selectAll) {
                            try {
                                selectAll.checked = checkboxes.every(cb => cb.checked);
                            } catch (e) { /* ignore */ }
                        }
                        return;
                    }
                    if (attempts < maxAttempts) setTimeout(tryApply, interval);
                };
                tryApply();
            });
        }

        // save on any change
        document.querySelectorAll('.form-container input, .form-container select').forEach(el => {
            el.addEventListener('change', saveFilters);
        });

    // restore at load (if present)
    // Because restoreFilters is async (waits for dynamic population), call and ignore errors
    (async function(){ try { await restoreFilters(); } catch(e) { /* ignore */ } })();

        // Advanced filters toggle - simple direct handler
        (function() {
            const advBtn = document.getElementById('show-advanced-btn');
            const advWrap = document.getElementById('advanced-filters');
            const advToggleContainer = document.getElementById('advanced-filters-toggle');
            function setToggleState(open) {
                if (!advWrap || !advBtn) return;
                if (open) {
                    advWrap.classList.add('show');
                    advWrap.style.display = 'block';
                    advBtn.textContent = 'Hide Advanced Filters';
                    if (advToggleContainer) advToggleContainer.classList.add('show');
                    advWrap.scrollIntoView({ behavior: 'smooth', block: 'start' });
                } else {
                    advWrap.classList.remove('show');
                    advWrap.style.display = 'none';
                    advBtn.textContent = 'Show Advanced Filters';
                    if (advToggleContainer) advToggleContainer.classList.remove('show');
                }
            }

            function toggleAdvanced() {
                const isOpen = advWrap && (advWrap.classList.contains('show') || advWrap.style.display === 'block');
                setToggleState(!isOpen);
            }

            if (advBtn) advBtn.addEventListener('click', function(e) { e.preventDefault(); toggleAdvanced(); });

            // Auto-open if saved advanced filters are present
            try {
                const raw = localStorage.getItem(FORM_KEY);
                if (raw) {
                    const data = JSON.parse(raw);
                    const advancedKeys = ['institute_type', 'city', 'college_name', 'branch'];
                    outer: for (const k of Object.keys(data)) {
                        for (const a of advancedKeys) {
                            if (k.indexOf(a) !== -1) {
                                // ensure panel is visible
                                setToggleState(true);
                                break outer;
                            }
                        }
                    }
                }
            } catch (_) { /* ignore */ }
        })();

        // ensure any time options are replaced programmatically we keep UI in sync
        // e.g., handleDomicileChange and other code replace options — MutationObserver above will handle it
        


                    // Smooth scrolling for info anchors
        document.querySelectorAll('.info-anchor').forEach(anchor => {
            anchor.addEventListener('click', function(e) {
                e.preventDefault();
                const targetId = this.getAttribute('href');
                const targetElement = document.querySelector(targetId);
                
                if (targetElement) {
                    targetElement.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                    
                    // Add highlight effect
                    const originalBg = targetElement.style.backgroundColor;
                    targetElement.style.transition = 'all 0.5s ease';
                    targetElement.style.backgroundColor = 'rgba(67, 97, 238, 0.15)';
                    
                    setTimeout(() => {
                        targetElement.style.backgroundColor = originalBg;
                    }, 2000);
                    
                    // Remove highlight after another 0.5s
                    setTimeout(() => {
                        targetElement.style.transition = '';
                    }, 2500);
                }
            });
        });
                        
    </script>
        <!-- Replace the entire upgrade modal section with this code -->
<!-- Upgrade Modal -->
<div id="upgrade-modal" class="upgrade-modal">
  <div class="upgrade-modal-content">
    <div class="upgrade-header">
      <div class="upgrade-icon">
        <i class='bx bx-crown'></i>
      </div>
      <h2>Unlock all results instantly</h2>
      <p>Kickstart your career with the best college match — for less than a pizza!</p>
      <button class="close-modal" id="upgrade-cancel">
        <i class='bx bx-x'></i>
      </button>
    </div>
    
    <!-- Replace the entire plans-container section with this code -->
<div class="plans-container">
  <!-- Plans Carousel for Mobile -->
  <div class="plans-carousel">
    <div class="plan-card" data-plan="small">
      <div class="plan-header">
        <h3>Starter Pack</h3>
        <div class="plan-price">
          <span class="currency">₹</span>
          <span class="amount">200</span>
        </div>
      </div>
      <div class="plan-features">
        <div class="feature">
          <i class='bx bx-check-circle'></i>
          <span>5 Search Turns</span>
        </div>
        <div class="feature">
          <i class='bx bx-check-circle'></i>
          <span>Priority Support</span>
        </div>
        <div class="feature">
          <i class='bx bx-check-circle'></i>
          <span>Personalized Recommendations</span>
        </div>
      </div>
      <button class="plan-select-btn">Buy Starter — 5 turns</button>
    </div>
    
    <div class="plan-card featured" data-plan="medium">
      <div class="plan-popular-tag">Most Popular</div>
      <div class="plan-header">
        <h3>Pro Pack</h3>
        <div class="plan-price">
          <span class="currency">₹</span>
          <span class="amount">500</span>
          <span class="save-tag">Save 17%</span>
        </div>
      </div>
      <div class="plan-features">
        <div class="feature">
          <i class='bx bx-check-circle'></i>
          <span>15 Search Turns</span>
        </div>
        <div class="feature">
          <i class='bx bx-check-circle'></i>
          <span>Priority Support</span>
        </div>
        <div class="feature">
          <i class='bx bx-check-circle'></i>
          <span>Personalized Recommendations</span>
        </div>
      </div>
      <button class="plan-select-btn featured-btn">Buy Pro — 15 turns</button>
    </div>
    
    <div class="plan-card" data-plan="large">
      <div class="plan-header">
        <h3>Max Pack</h3>
        <div class="plan-price">
          <span class="currency">₹</span>
          <span class="amount">1000</span>
          <span class="save-tag">Save 50%</span>
        </div>
      </div>
      <div class="plan-features">
        <div class="feature">
          <i class='bx bx-check-circle'></i>
          <span>50 Search Turns</span>
        </div>
        <div class="feature">
          <i class='bx bx-check-circle'></i>
          <span>Priority Support</span>
        </div>
        <div class="feature">
          <i class='bx bx-check-circle'></i>
          <span>Personalized Recommendations</span>
        </div>
      </div>
      <button class="plan-select-btn">Buy Max — 50 turns</button>
    </div>
  </div>
  
  <!-- Carousel Navigation Dots -->
  <div class="carousel-dots">
    <span class="dot active" data-index="0"></span>
    <span class="dot" data-index="1"></span>
    <span class="dot" data-index="2"></span>
  </div>
  
  <!-- Carousel Navigation Arrows (for desktop) -->
  <button class="carousel-arrow carousel-prev">
    <i class='bx bx-chevron-left'></i>
  </button>
  <button class="carousel-arrow carousel-next">
    <i class='bx bx-chevron-right'></i>
  </button>
</div>
    
    <div class="upgrade-footer">
      <p><i class='bx bx-shield-quarter'></i> All payments are secure and encrypted</p>
    </div>
  </div>
</div>

<script>

   // Upgrade modal logic and Razorpay checkout integration
(function(){
  const upgradeModal = document.getElementById('upgrade-modal');
  const turnsPill = document.getElementById('turns-pill');
  
  function openModal(){ 
    upgradeModal.classList.add('show');
    document.body.style.overflow = 'hidden';
    // Ensure Pro Pack (middle card) is visible first on mobile
    try {
      if (window.matchMedia && window.matchMedia('(max-width: 900px)').matches && window.setPlanIndex) {
        // Wait a tick for layout so measurements are correct, then jump to Pro
        requestAnimationFrame(() => setTimeout(() => window.setPlanIndex(1), 60));
      }
    } catch(e) {}
  }
  
  function closeModal(){ 
    upgradeModal.classList.remove('show');
    document.body.style.overflow = 'auto';
  }
  
  // Open modal when clicking turns pill
  if (turnsPill) turnsPill.addEventListener('click', openModal);
  
  // Close modal when clicking close button
  document.getElementById('upgrade-cancel').addEventListener('click', closeModal);
  
  // Close modal when clicking outside content
  upgradeModal.addEventListener('click', function(e) {
    if (e.target === upgradeModal) closeModal();
  });
  
  // Refresh authoritative turns from server when modal opens
  async function refreshTurns() {
    try {
      const r = await fetch('/user/paid-turns', { method:'GET', credentials:'same-origin' });
      if (r.ok) {
        const d = await r.json();
        const val = Number(d.paid_turns || 0);
        window.__USER_PAID = val;
        const pill = document.getElementById('turns-count'); 
        if (pill) pill.textContent = val;
        const parent = document.getElementById('turns-pill'); 
        if (parent) { 
          parent.classList.toggle('positive', val>0); 
          parent.classList.toggle('zero', val<=0); 
        }
      }
    } catch(e) {}
  }
  
  // Handle plan selection
  document.querySelectorAll('.plan-select-btn').forEach(btn => {
    btn.addEventListener('click', async function() {
      const planCard = this.closest('.plan-card');
      const plan = planCard.dataset.plan;
      
      try {
        const resp = await fetch('/payment/create-order', { 
          method: 'POST', 
          headers: { 'Content-Type':'application/json' }, 
          body: JSON.stringify({ plan, origin: 'index' }) 
        });
        
        const data = await resp.json();
        if (!resp.ok) throw new Error(data.error || 'Order creation failed');
        
        // Open Razorpay checkout
        const options = {
          key: data.key_id,
          amount: data.order.amount,
          currency: data.order.currency,
          name: 'College Preferencer',
          description: data.planLabel,
          order_id: data.order.id,
          handler: async function(response){
            // Verify on server
            const verifyResp = await fetch('/payment/verify', { 
              method: 'POST', 
              headers: { 'Content-Type':'application/json' }, 
              body: JSON.stringify(response) 
            });
            
            const verifyData = await verifyResp.json();
            if (verifyData.success) {
              // Show success message with animation
              const planCard = document.querySelector(`.plan-card[data-plan="${plan}"]`);
              if (planCard) {
                planCard.style.animation = 'pulse 0.5s';
                setTimeout(() => {
                  planCard.style.animation = '';
                }, 500);
              }
              
              // Update turns count
              refreshTurns();
              
              // Show success notification
              showNotification(`Purchase successful! ${verifyData.turnsAdded} turns added to your account.`, 'success');
              
              setTimeout(() => {
                closeModal();
              }, 1500);
            } else {
              showNotification('Payment verification failed. Please try again.', 'error');
            }
          },
          modal: { 
            ondismiss: function() {
              showNotification('Payment cancelled', 'info');
            } 
          },
          theme: {
            color: '#4361ee'
          }
        };
        
        const rzp = new Razorpay(options);
        rzp.open();
      } catch (err) {
        console.error(err);
        showNotification('Unable to start payment. Please try again.', 'error');
      }
    });
  });
  
  // Helper function to show notifications
  function showNotification(message, type = 'info') {
    // Remove any existing notifications
    const existingNotification = document.querySelector('.notification');
    if (existingNotification) {
      existingNotification.remove();
    }
    
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
      <div class="notification-content">
        <i class='bx ${type === 'success' ? 'bx-check-circle' : type === 'error' ? 'bx-error-circle' : 'bx-info-circle'}'></i>
        <span>${message}</span>
      </div>
    `;
    
    // Add to page
    document.body.appendChild(notification);
    
    // Show notification
    setTimeout(() => {
      notification.classList.add('show');
    }, 10);
    
    // Hide after 3 seconds
    setTimeout(() => {
      notification.classList.remove('show');
      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 300);
    }, 3000);
  }
  
  // Add CSS for notifications
  const notificationStyles = document.createElement('style');
  notificationStyles.textContent = `
    .notification {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: white;
      border-radius: 8px;
      padding: 15px 20px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
      display: flex;
      align-items: center;
      z-index: 3000;
      transform: translateY(100px);
      opacity: 0;
      transition: all 0.3s ease;
    }
    
    .notification.show {
      transform: translateY(0);
      opacity: 1;
    }
    
    .notification-success {
      border-left: 4px solid var(--secondary);
    }
    
    .notification-error {
      border-left: 4px solid var(--accent);
    }
    
    .notification-info {
      border-left: 4px solid var(--primary);
    }
    
    .notification-content {
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .notification-content i {
      font-size: 20px;
    }
    
    .notification-success i {
      color: var(--secondary);
    }
    
    .notification-error i {
      color: var(--accent);
    }
    
    .notification-info i {
      color: var(--primary);
    }
    
    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.03); }
      100% { transform: scale(1); }
    }
  `;
  
  document.head.appendChild(notificationStyles);
})();



// Carousel functionality for mobile plans
(function() {
  const carousel = document.querySelector('.plans-carousel');
  const dots = document.querySelectorAll('.dot');
  const prevBtn = document.querySelector('.carousel-prev');
  const nextBtn = document.querySelector('.carousel-next');
  const planCards = document.querySelectorAll('.plan-card');
  
  if (!carousel) return;
  
  // Default to Pro Pack (middle card) on mobile
  let currentIndex = (window.matchMedia && window.matchMedia('(max-width: 900px)').matches) ? 1 : 0;
  
  // Function to update carousel position
  function updateCarousel() {
    const cardWidth = planCards[0].offsetWidth + 30; // width + margin
    carousel.scrollTo({
      left: currentIndex * cardWidth,
      behavior: 'smooth'
    });

  // Expose a helper so other scripts (modal open) can force the active plan
  window.setPlanIndex = function(i) {
    if (!planCards || !planCards.length) return;
    currentIndex = Math.max(0, Math.min(planCards.length - 1, i));
    // Prefer snapping the desired card into view, then update active states
    try {
      const card = planCards[currentIndex];
      if (card && card.scrollIntoView) {
        card.scrollIntoView({ behavior: 'auto', inline: 'center', block: 'nearest' });
      }
    } catch(e) {}
    updateCarousel();
  };
    
    // Update active dot
    dots.forEach((dot, index) => {
      dot.classList.toggle('active', index === currentIndex);
    });
    
    // Update active card
    planCards.forEach((card, index) => {
      card.classList.toggle('active', index === currentIndex);
    });
  }
  
  // Next button click
  if (nextBtn) {
    nextBtn.addEventListener('click', () => {
      currentIndex = (currentIndex + 1) % planCards.length;
      updateCarousel();
    });
  }
  
  // Previous button click
  if (prevBtn) {
    prevBtn.addEventListener('click', () => {
      currentIndex = (currentIndex - 1 + planCards.length) % planCards.length;
      updateCarousel();
    });
  }
  
  // Dot navigation
  dots.forEach(dot => {
    dot.addEventListener('click', () => {
      currentIndex = parseInt(dot.dataset.index);
      updateCarousel();
    });
  });
  
  // Swipe handling for touch devices
  let touchStartX = 0;
  let touchEndX = 0;
  
  carousel.addEventListener('touchstart', e => {
    touchStartX = e.changedTouches[0].screenX;
  }, false);
  
  carousel.addEventListener('touchend', e => {
    touchEndX = e.changedTouches[0].screenX;
    handleSwipe();
  }, false);
  
  function handleSwipe() {
    const swipeThreshold = 50;
    
    if (touchEndX < touchStartX - swipeThreshold) {
      // Swipe left - go to next
      currentIndex = (currentIndex + 1) % planCards.length;
      updateCarousel();
    }
    
    if (touchEndX > touchStartX + swipeThreshold) {
      // Swipe right - go to previous
      currentIndex = (currentIndex - 1 + planCards.length) % planCards.length;
      updateCarousel();
    }
  }
  
  // Initialize carousel (ensure correct default active card)
  updateCarousel();
  
  // Adjust for window resize
  window.addEventListener('resize', updateCarousel);
})();

</script>

</body>
</html>






