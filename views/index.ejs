<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>College Preference Finder</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <link rel="stylesheet" href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css">
    <style>
        :root {
            --primary: #4361ee;
            --primary-dark: #3a56d4;
            --secondary: #06d6a0;
            --accent: #ff6b6b;
            --light: #f8f9fa;
            --dark: #1e293b;
            --text: #334155;
            --text-light: #64748b;
            --border: #e2e8f0;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
            --transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        }
        * { margin: 0; padding: 0; box-sizing: border-box; font-family: 'Poppins', sans-serif; }
        body { background: linear-gradient(135deg, #f0f4f8 0%, #e6e9f0 100%); min-height: 100vh; color: var(--text); padding: 20px; position: relative; overflow-x: hidden; }
        body::before { content: ""; position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: linear-gradient(to right, rgba(0, 0, 0, 0.03) 1px, transparent 1px), linear-gradient(to bottom, rgba(0, 0, 0, 0.03) 1px, transparent 1px); background-size: 40px 40px; z-index: -1; }
        .decoration { position: absolute; z-index: 0; }
        .decoration-1 { top: 50px; right: 50px; width: 150px; height: 150px; border-radius: 50%; background: linear-gradient(135deg, var(--primary) 0%, #5e72e4 100%); opacity: 0.1; }
        .decoration-2 { bottom: 50px; left: 50px; width: 200px; height: 200px; border-radius: 50%; background: linear-gradient(135deg, var(--secondary) 0%, #06b6d4 100%); opacity: 0.08; }
        /* Header */
    header {
      background: white;
      box-shadow: var(--shadow);
      border-radius: 16px;
      max-width: 1200px;
      margin: 0 auto 30px;
      padding: 15px 30px;
    }

    .header-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
      max-width: 1200px;
      margin: 0 auto;
    }

    .header-logo {
      height: 40px;
    }

    .user-info {
      display: flex;
      align-items: center;
      gap: 15px;
    }

    .user-name {
      font-weight: 500;
      color: var(--dark);
      font-size: 15px;
    }

    .logout-btn {
      background: linear-gradient(to right, var(--primary), var(--primary-dark));
      color: white;
      border: none;
      border-radius: 8px;
      padding: 8px 16px;
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      transition: var(--transition);
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .logout-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(67, 97, 238, 0.3);
    }
        .container { max-width: 1200px; margin: 0 auto; position: relative; z-index: 1; padding: 0 20px; }
        .back-nav { margin-bottom: 30px; }
        .back-link { display: inline-flex; align-items: center; gap: 8px; color: var(--primary); font-weight: 500; text-decoration: none; padding: 8px 16px; border-radius: 8px; transition: var(--transition); }
        .back-link:hover { background: rgba(67, 97, 238, 0.1); transform: translateX(-5px); }
        .back-link i { font-size: 18px; }
        .hero { text-align: center; margin-bottom: 40px; position: relative; }
        .hero-logo { width: 100px; height: 100px; margin: 0 auto 15px; display: flex; align-items: center; justify-content: center; background: white; border-radius: 50%; box-shadow: var(--shadow); padding: 15px; }
        .hero-title { font-size: 2.8rem; font-weight: 700; color: var(--dark); margin-bottom: 10px; letter-spacing: -0.5px; }
        .hero-tag { display: inline-flex; align-items: center; gap: 8px; background: rgba(6, 214, 160, 0.15); color: #06a17e; padding: 8px 20px; border-radius: 50px; font-weight: 500; margin-top: 10px; }
        .form-container { background: white; border-radius: 20px; box-shadow: var(--shadow); padding: 40px; margin-bottom: 40px; position: relative; z-index: 2; }
    /* Use a smaller minimum so the grid auto-fits narrow phones without horizontal overflow */
    .form-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(160px, 1fr)); gap: 18px; margin-bottom: 18px; }
    .form-group { margin-bottom: 0; min-width: 0; }
        .form-label { display: block; font-size: 15px; font-weight: 500; color: var(--dark); margin-bottom: 10px; }
        /* Inputs and selects share the same rounded, elevated appearance used by the custom dropdowns */
        .form-input, .form-select {
            width: 100%;
            padding: 14px 20px;
            border: 1px solid var(--border);
            border-radius: 12px;
            font-size: 15px;
            transition: var(--transition);
            background: #f9fafc;
            box-shadow: 0 4px 15px rgba(67, 97, 238, 0.08);
            /* make native selects behave/look consistently across browsers */
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            display: inline-block;
            line-height: 1.2;
            /* prevent children from forcing the grid to overflow */
            min-width: 0;
            max-width: 100%;
            box-sizing: border-box;
        }

        .form-input:focus, .form-select:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 4px rgba(67, 97, 238, 0.15);
            background: white;
        }

        /* Make the select show a custom caret and reserve space for it so the select looks like the rounded dropdown button */
        .form-select {
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%2364748b' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: right 18px center;
            background-size: 16px;
            padding-right: 44px; /* leave space for the caret so text doesn't overlap */
            cursor: pointer;
        }
        .dropdown { position: relative; width: 100%; }
        .dropdown-btn { width: 100%; padding: 14px 20px; background: #f9fafc; border: 1px solid var(--border); border-radius: 12px; font-size: 15px; text-align: left; cursor: pointer; display: flex; justify-content: space-between; align-items: center; transition: var(--transition); box-shadow: 0 4px 15px rgba(67, 97, 238, 0.08); }
        .dropdown-btn:hover { background: white; border-color: var(--primary); }
        .dropdown-btn i { font-size: 18px; transition: var(--transition); }
        .dropdown-content { display: none; position: absolute; top: 100%; left: 0; right: 0; background: white; border: 1px solid var(--border); border-radius: 12px; padding: 15px; box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1); z-index: 10; max-height: 250px; overflow-y: auto; margin-top: 5px; }
        .dropdown-content.show { display: block; }
        .dropdown-header { display: flex; align-items: center; padding: 8px 0; margin-bottom: 10px; border-bottom: 1px solid var(--border); }
        .dropdown-option { display: flex; align-items: center; padding: 10px 0; cursor: pointer; }
        .dropdown-option input { margin-right: 12px; }
        .dropdown-option:hover { color: var(--primary); }
        .checkbox-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 15px; margin-top: 10px; }
        .checkbox-item { display: flex; align-items: center; }
        .checkbox-item input { margin-right: 10px; }
        .submit-btn { display: block; margin: 40px auto 0; background: linear-gradient(to right, var(--primary), var(--primary-dark)); color: white; border: none; border-radius: 12px; padding: 16px 50px; font-size: 18px; font-weight: 600; cursor: pointer; transition: var(--transition); box-shadow: 0 4px 15px rgba(67, 97, 238, 0.3); }
        .submit-btn:hover { background: linear-gradient(to right, var(--primary-dark), #2f44c0); transform: translateY(-3px); box-shadow: 0 6px 20px rgba(67, 97, 238, 0.4); }
        .info-box { background: rgba(255, 229, 100, 0.2); border-left: 4px solid #ffd43b; color: #8e7b0c; padding: 20px; border-radius: 12px; display: flex; align-items: flex-start; gap: 15px; max-width: 800px; margin: 0 auto; }
        .info-icon { font-size: 24px; color: #f59f00; flex-shrink: 0; }
        .info-text { font-size: 15px; line-height: 1.6; }
    @media (max-width: 1024px) { .hero-title { font-size: 2.4rem; } .form-container { padding: 30px; } }
    /* Advanced filters box */
    /* Advanced filters toggle */
/* Advanced filters toggle */
#advanced-filters-toggle {
    text-align: center;
    margin: 1rem 0 1.5rem;
}

/* Main button styles */
#show-advanced-btn {
    background: transparent;
    color: #333;
    border: none;
    padding: 0.5rem 1rem;
    cursor: pointer;
    font-weight: 600;
    font-size: 0.95rem;
    transition: all 0.25s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
}

/* Chevron before text - points down by default (show more) */
#show-advanced-btn::before {
    content: "‹‹";              /* Double chevron */
    display: inline-block;
    font-weight: 900;
    font-size: 1.2rem;          /* Bigger size */
    transform: rotate(-90deg);   /* Points down */
    transition: transform 0.3s ease;
    margin-right: 0.5rem;
    line-height: 1;
}

/* Chevron points up when expanded (hide options) */
#advanced-filters-toggle.show #show-advanced-btn::before {
    transform: rotate(90deg); /* Points up */
}

#show-advanced-btn:hover {
    color: #000;
}

/* Filters container styles remain unchanged */
#advanced-filters {
    display: none;
    background: white;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    padding: 1.5rem;
    margin-top: 1rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}

#advanced-filters.show {
    display: block;
    animation: fadeIn 0.3s ease-out;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
}
        /* Mobile overrides: keep desktop styles above unchanged */
        @media (max-width: 768px) {
            header { padding: 12px 16px; border-radius: 10px; }
            /* hide big decorations on mobile to reduce clutter */
            .decoration-1, .decoration-2 { display: none !important; }
            .header-content { flex-direction: column; align-items: flex-start; gap: 8px; }
            .form-container { padding: 18px; }
            .advanced-box { padding: 12px; }
            .filters-grid { display: block; }
            #advanced-filters { padding: 12px; }
            /* Transform large multi-column dropdowns into scrollable blocks */
            .dropdown-options { max-height: 220px; overflow-y: auto; -webkit-overflow-scrolling: touch; }
        }
                @media (max-width: 360px) {
                    header { padding: 10px 12px; }
                    /* Ensure main title and tagline fit on a single line on very narrow screens */
                    .hero-title { font-size: 24px !important; line-height:1.05; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
                    .hero-tag { font-size: 12px !important; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
                    /* Slightly reduce container side padding so content has more room */
                    .container { padding-left: 8px; padding-right: 8px; }
                }

        @media (max-width: 480px) {
            body { padding: 10px; }
            .header-logo { height: 34px; }
            .hero-title { font-size: 1.6rem; }
            .form-container { padding: 12px; }
            #show-advanced-btn { font-size: 14px; }
            .advanced-box { padding: 10px; }
            .dropdown-option { padding: 6px 0; }
            /* Keep logo + welcome + logout on a single line on small screens */
            .header-content { flex-direction: row; align-items: center; justify-content: space-between; }
            .user-info { display: flex; align-items: center; gap: 8px; }
            .user-name { font-size: 13px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 45vw; }
            .logout-btn { padding: 6px 10px; font-size: 13px; }
        }
</style>
</head>
<body>
    <!-- Decorative Elements -->
    <div class="decoration decoration-1"></div>
    <div class="decoration decoration-2"></div>

    <!-- Header -->
    <header>
    <div class="header-content">
      <img src="/images/MargDarshak.png" alt="MargDarshak logo" class="header-logo">
      <div class="user-info">
        <% if (typeof user !== 'undefined' && user) { %>
          <span class="user-name">Welcome, <%= user.name || user.displayName || user.email %></span>
          <a href="/logout" class="logout-btn"><i class='bx bx-log-out'></i> Logout</a>
        <% } else { %>
          <a href="/login" class="logout-btn"><i class='bx bx-log-in'></i> Login</a>
        <% } %>
      </div>
    </div>
  </header>

    <!-- Main Container -->
    <div class="container">
        <!-- Back Navigation -->
        

        <!-- Hero Section -->
        <div class="hero">
            <div class="hero-logo">
                <svg xmlns="http://www.w3.org/2000/svg" width="70" height="70" viewBox="0 0 100 100">
                    <circle cx="50" cy="50" r="48" fill="#4361ee" opacity="0.1"/>
                    <path d="M50 20 L70 40 L65 70 L35 70 L30 40 Z" fill="#4361ee"/>
                    <circle cx="50" cy="35" r="8" fill="#06d6a0"/>
                    <circle cx="50" cy="55" r="5" fill="white"/>
                </svg>
            </div>
            <h1 class="hero-title">College Preference Finder</h1>
            <div class="hero-tag">
                <i class='bx bx-check-circle'></i> No Hidden Charges, 100% Free
            </div>
        </div>

        <!-- Form Container -->
        <form action="/search" method="POST" class="form-container">
            <!-- Rank/Domicile/Caste Row -->
            <div class="form-grid">
                <div class="form-group">
                    <label class="form-label" for="rank">Rank:</label>
                    <input type="number" id="rank" name="rank" class="form-input" required>
                </div>
                <div class="form-group">
                    <label class="form-label" for="domicile">Domicile:</label>
                    <select id="domicile" name="domicile" class="form-select" onchange="handleDomicileChange()" required>
                        <option value='AI'>All India</option>
                        <option value='Y'>MP Resident</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label" for="caste">Caste:</label>
                    <select id="caste" name="caste" class="form-select" onchange="handleCasteChange()" required></select>
                </div>
            </div>

            <!-- Class/Gender/Categories Row -->
            <div class="form-grid">
                <div class="form-group" id="class-container">
                    <label class="form-label" for="class">Class:</label>
                    <select id="class" name="class" class="form-select">
                        <option value='X'>NILL (X)</option>
                        <option value='H'>Handicapped (H)</option>
                        <option value='S'>Sainik (S)</option>
                        <option value='NCC'>NCC</option>
                        <option value='FF'>Freedom Fighter (FF)</option>
                    </select>
                </div>
                <div class="form-group" id="gender-container">
                    <label class="form-label" for="gender">Gender:</label>
                    
                    <select id="gender" name="gender" class="form-select">
                        <option value='OP'>Open (OP)</option>
                        <option value='F'>Female (F)</option>
                    </select>
                   
                </div>
                <div class="form-group">
                    <label class="form-label">Select Categories:</label>
                    <div class="dropdown">
                        <button type="button" class="dropdown-btn" onclick="toggleDropdown('categoryDropdown')">
                            Select Categories <i class='bx bx-chevron-down'></i>
                        </button>
                        <div id="categoryDropdown" class="dropdown-content">
                            <div id="categoryCheckboxes"></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Rank Range/Sort By/Round (visible by default) -->
            <div class="form-grid">
                <div class="form-group">
                    <label class="form-label" for="rank_range">Rank Range:</label>
                    <select name="rank_range" id="rank_range" class="form-select">
                        <option value="10000000">Start To End</option>
                        <option value="1000000">±10 lakh</option>
                        <option value="500000">±5 lakh</option>
                        <option value="200000">±2 lakh</option>
                        <option value="100000">±1 lakh</option>
                        <option value="50000">±50k</option>
                        <option value="20000">±20k</option>
                        <option value="10000">±10k</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label" for="sort_by">Sort By:</label>
                    <select id="sort_by" name="sort_by" class="form-select">
                        <option value="lastYearTrend">Last Year Trend</option>
                        <option value="closing_rank">Closing Rank</option>
                        <option value="opening_rank">Opening Rank</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label" for="round">Round:</label>
                    <select id="round" name="round" class="form-select">
                        <option value="FIRST">FIRST</option>
                        <option value="UPGRADE">UPGRADE</option>
                        <option value="SECOND">SECOND</option>
                        <option value="FIRST&UPGRADE">FIRST & UPGRADE</option>
                    </select>
                </div>
            </div>
            <!-- Advanced toggle button -->
            <div id="advanced-filters-toggle" style="text-align:center; margin-bottom:12px;">
                <button type="button" id="show-advanced-btn" class="filter-btn">Show Advanced Filters</button>
            </div>
            <div id="advanced-filters" class="advanced-box">
                <!-- Institute Type/City Row (advanced) -->
                <div class="form-grid">
                    <div class="form-group">
                        <label class="form-label">Institute Type:</label>
                        <div class="checkbox-grid">
                            <div class="checkbox-item">
                                <input type="checkbox" name="institute_type" value="PRIVATE" class="institute-checkbox" checked onchange="checkInstituteTypes()">
                                <label>Private</label>
                            </div>
                            <div class="checkbox-item">
                                <input type="checkbox" name="institute_type" value="GOVT" class="institute-checkbox" checked onchange="checkInstituteTypes()">
                                <label>Government</label>
                            </div>
                            <div class="checkbox-item">
                                <input type="checkbox" name="institute_type" value="S.F.I." class="institute-checkbox" checked onchange="checkInstituteTypes()">
                                <label>Self-Financed Institute</label>
                            </div>
                            <div class="checkbox-item">
                                <input type="checkbox" name="institute_type" value="AIDED" class="institute-checkbox" checked onchange="checkInstituteTypes()">
                                <label>Government Aided</label>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Select City/Cities:</label>
                        <div class="dropdown">
                            <button type="button" class="dropdown-btn" onclick="toggleDropdown('cityDropdown')">
                                Select Cities <i class='bx bx-chevron-down'></i>
                            </button>
                            <div id="cityDropdown" class="dropdown-content">
                                <div id="cityCheckboxes"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- College/Branch Row (advanced) -->
                <div class="form-grid">
                    <div class="form-group">
                        <label class="form-label">College Name:</label>
                        <div class="dropdown">
                            <button type="button" class="dropdown-btn" onclick="toggleDropdown('collegeDropdown')">
                                Select College Names <i class='bx bx-chevron-down'></i>
                            </button>
                            <div id="collegeDropdown" class="dropdown-content">
                                <div id="collegeCheckboxes"></div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Select Branch/Branches:</label>
                        <div class="dropdown">
                            <button type="button" class="dropdown-btn" onclick="toggleDropdown('branchDropdown')">
                                Select Branches <i class='bx bx-chevron-down'></i>
                            </button>
                            <div id="branchDropdown" class="dropdown-content">
                                <div id="branchCheckboxes"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Submit Button -->
            <button type="submit" class="submit-btn">Search Colleges</button>
        </form>

        <!-- Info Box -->
        <div class="info-box">
            <i class='bx bx-info-circle info-icon'></i>
            <p class="info-text">Fill all the fields above to get personalized college recommendations based on your JEE Mains rank and preferences.</p>
        </div>
    </div>

    <script>
        // ==========================================
        // DOMICILE & CASTE HANDLING
        // ==========================================
        function handleDomicileChange() {
            const domicile = document.getElementById('domicile').value;
            const casteSelect = document.getElementById('caste');
            casteSelect.innerHTML = '';

            if (domicile === 'AI') {
                casteSelect.options.add(new Option('EWS', 'EWS'));
                casteSelect.options.add(new Option('OBC', 'OBC'));
                casteSelect.options.add(new Option('SC', 'SC'));
                casteSelect.options.add(new Option('ST', 'ST'));
                casteSelect.options.add(new Option('UR (Unreserved)', 'UR'));
                casteSelect.options.add(new Option('FW (Fee wavier)', 'FW'));
                casteSelect.options.add(new Option('JKM (Jammu & Kashmir Migrants)', 'JKM'));
                casteSelect.options.add(new Option('JKR (Jammu & Kashmir Residents)', 'JKR'));
                casteSelect.options.add(new Option('NTPC', 'NTPC'));
            } else {
                casteSelect.options.add(new Option('EWS', 'EWS'));
                casteSelect.options.add(new Option('OBC', 'OBC'));
                casteSelect.options.add(new Option('SC', 'SC'));
                casteSelect.options.add(new Option('ST', 'ST'));
                casteSelect.options.add(new Option('UR (Unreserved)', 'UR'));
                casteSelect.options.add(new Option('FW (Fee wavier)', 'FW'));
            }
            handleCasteChange();
        }

        function handleCasteChange() {
            const caste = document.getElementById('caste').value;
            const classContainer = document.getElementById('class-container');
            const genderContainer = document.getElementById('gender-container');

            if (caste === 'EWS' || caste === 'NTPC' || caste === 'JKM' || caste === 'JKR') {
                classContainer.style.display = 'none';
                genderContainer.style.display = 'none';
            } else if (caste === 'FW') {
                classContainer.style.display = 'none';
                genderContainer.style.display = 'block';
            } else {
                classContainer.style.display = 'block';
                genderContainer.style.display = 'block';
            }
        }

        // ==========================================
        // DROPDOWN TOGGLES
        // ==========================================
        function toggleDropdown(dropdownId) {
            const dropdown = document.getElementById(dropdownId);
            dropdown.classList.toggle('show');
            const btn = document.querySelector(`[onclick="toggleDropdown('${dropdownId}')"]`);
            const icon = btn.querySelector('i');
            if (dropdown.classList.contains('show')) {
                icon.className = 'bx bx-chevron-up';
            } else {
                icon.className = 'bx bx-chevron-down';
            }
        }

        // Close dropdowns when clicking outside
        window.onclick = function(event) {
            if (!event.target.matches('.dropdown-btn')) {
                const dropdowns = document.getElementsByClassName('dropdown-content');
                for (let i = 0; i < dropdowns.length; i++) {
                    const openDropdown = dropdowns[i];
                    if (openDropdown.classList.contains('show')) {
                        if (!openDropdown.contains(event.target)) {
                            openDropdown.classList.remove('show');
                            const btn = document.querySelector(`[onclick="toggleDropdown('${openDropdown.id}')"]`);
                            if (btn) {
                                const icon = btn.querySelector('i');
                                icon.className = 'bx bx-chevron-down';
                            }
                        }
                    }
                }
            }
        }

        // ==========================================
        // CATEGORY HANDLING
        // ==========================================
        function generateCategoryCheckboxes(categories) {
            const container = document.getElementById('categoryCheckboxes');
            container.innerHTML = '';
            
            // Only one 'All' row, with partition line below
            const allRow = document.createElement('div');
            allRow.className = 'dropdown-option';

            const selectAll = document.createElement('input');
            selectAll.type = 'checkbox';
            selectAll.id = 'select_all_categories';
            selectAll.className = 'select-all';

            const allLabel = document.createElement('label');
            allLabel.htmlFor = selectAll.id;
            allLabel.className = 'ml-2';
            allLabel.textContent = 'All';
            // Make label clickable to toggle checkbox
            allLabel.addEventListener('click', function(e) {
                selectAll.checked = !selectAll.checked;
                selectAll.dispatchEvent(new Event('change'));
            });

            allRow.appendChild(selectAll);
            allRow.appendChild(allLabel);
            container.appendChild(allRow);

            // Partition line below 'All'
            const divider = document.createElement('div');
            divider.style.borderBottom = '1px solid var(--border)';
            divider.style.margin = '8px 0 8px 0';
            container.appendChild(divider);
            
            categories.forEach(category => {
                const option = document.createElement('div');
                option.className = 'dropdown-option';
            
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.name = 'selectedCategories';
                checkbox.value = category;
                checkbox.id = `category_${category}`;
                checkbox.classList.add('category-checkbox');
                checkbox.checked = true;
            
                const label = document.createElement('label');
                label.htmlFor = checkbox.id;
                label.textContent = category;
                label.className = 'ml-2';
                // Make label clickable to toggle checkbox
                label.addEventListener('click', function(e) {
                    checkbox.checked = !checkbox.checked;
                    checkbox.dispatchEvent(new Event('change'));
                });

                option.appendChild(checkbox);
                option.appendChild(label);
                container.appendChild(option);
            });
            initializeSelectAllCategories();
        }

        function toggleAllCategories(checkbox) {
            const categoryCheckboxes = document.querySelectorAll('.category-checkbox');
            categoryCheckboxes.forEach(cb => {
                cb.checked = checkbox.checked;
                const event = new Event('change');
                cb.dispatchEvent(event);
            });
        }

        function initializeSelectAllCategories() {
            const selectAllCategoriesCheckbox = document.getElementById('select_all_categories');
            const categoryCheckboxes = document.querySelectorAll('.category-checkbox');
            let isSelectAllTriggered = false;

            const unchecked = Array.from(categoryCheckboxes).some(cb => !cb.checked);
            if (!unchecked) {
                selectAllCategoriesCheckbox.checked = true;
            }

            selectAllCategoriesCheckbox.addEventListener('change', function() {
                isSelectAllTriggered = true;
                toggleAllCategories(this);
                isSelectAllTriggered = false;
            });

            categoryCheckboxes.forEach(cb => {
                cb.addEventListener('change', function() {
                    if (!this.checked) {
                        selectAllCategoriesCheckbox.checked = false;
                    } else {
                        const unchecked = Array.from(categoryCheckboxes).some(cb => !cb.checked);
                        if (!unchecked) {
                            selectAllCategoriesCheckbox.checked = true;
                        }
                    }

                    const checkedCount = Array.from(categoryCheckboxes).filter(chk => chk.checked).length;
                    if (checkedCount === 0 && !isSelectAllTriggered) {
                        // Instead of popup, always keep at least one checked
                        this.checked = true;
                    }
                });
            });

            selectAllCategoriesCheckbox.addEventListener('change', function() {
                if (!this.checked) {
                    const firstCheckbox = document.querySelector('.category-checkbox');
                    if (firstCheckbox) {
                        categoryCheckboxes.forEach(cb => cb.checked = false);
                        firstCheckbox.checked = true;
                        const event = new Event('change');
                        firstCheckbox.dispatchEvent(event);
                    }
                }
            });
        }

        function updateCategories() {
            const caste = document.getElementById('caste').value || 'EWS';
            const classType = document.getElementById('class').value || '';
            const gender = document.getElementById('gender').value || '';

            fetch(`/generate-categories?caste=${caste}&class=${classType}&gender=${gender}`)
                .then(response => response.json())
                .then(data => {
                    generateCategoryCheckboxes(data.categories);
                })
                .catch(error => console.error('Error fetching categories:', error));
        }

        // ==========================================
        // INSTITUTE TYPE HANDLING
        // ==========================================
        function checkInstituteTypes() {
            const checkboxes = document.querySelectorAll('.institute-checkbox');
            const checkedCount = Array.from(checkboxes).filter(checkbox => checkbox.checked).length;
        
            if (checkedCount === 0) {
                alert('At least one option should be selected!');
                checkboxes[0].checked = true;
            }
        }

// Use the same, unified behavior for cities, colleges, and branches

// Generic renderer to build identical dropdown content for any group
// groupKey: 'city' | 'college_name' | 'branch'
function renderGroupOptions(groupKey, items) {
    let checkboxesContainer;
    if (groupKey === 'city') {
        checkboxesContainer = document.getElementById('cityCheckboxes');
    } else if (groupKey === 'college_name') {
        checkboxesContainer = document.getElementById('collegeCheckboxes');
    } else if (groupKey === 'branch') {
        checkboxesContainer = document.getElementById('branchCheckboxes');
    }
    checkboxesContainer.innerHTML = '';

    // Only one 'All' row, with partition line below
    const allRow = document.createElement('div');
    allRow.className = 'dropdown-option';

    const selectAll = document.createElement('input');
    selectAll.type = 'checkbox';
    selectAll.id = `select_all_${groupKey}`;
    selectAll.className = 'select-all';
    selectAll.dataset.group = groupKey;

    const allLabel = document.createElement('label');
    allLabel.htmlFor = selectAll.id;
    allLabel.className = 'ml-2';
    allLabel.textContent = 'All';
    // Make label clickable to toggle checkbox
    allLabel.addEventListener('click', function(e) {
        selectAll.checked = !selectAll.checked;
        selectAll.dispatchEvent(new Event('change'));
    });

    allRow.appendChild(selectAll);
    allRow.appendChild(allLabel);
    checkboxesContainer.appendChild(allRow);

    // Partition line below 'All'
    const divider = document.createElement('div');
    divider.style.borderBottom = '1px solid var(--border)';
    divider.style.margin = '8px 0 8px 0';
    checkboxesContainer.appendChild(divider);

    items.forEach(value => {
        const row = document.createElement('div');
        row.className = 'dropdown-option';

        const cb = document.createElement('input');
        cb.type = 'checkbox';
        cb.name = `${groupKey}[]`;
        cb.value = value;
        cb.className = `${groupKey}-checkbox option-checkbox`;
        cb.checked = true;

        const label = document.createElement('label');
        label.className = 'ml-2';
        label.textContent = value;
        label.htmlFor = cb.id = `${groupKey}_${value.replace(/\s+/g, '_')}`;
        // Make label clickable to toggle checkbox
        label.addEventListener('click', function(e) {
            cb.checked = !cb.checked;
            cb.dispatchEvent(new Event('change'));
        });

        row.appendChild(cb);
        row.appendChild(label);
        checkboxesContainer.appendChild(row);
    });
}

// Generic initializer for Select All + “at least one selected” + cascade updates
function initMultiSelect(groupKey) {
    const selectAll = document.getElementById(`select_all_${groupKey}`);
    const optionSelector = `.${groupKey}-checkbox`;
    const checkboxes = Array.from(document.querySelectorAll(optionSelector));
    let fromSelectAll = false;

    function syncSelectAll() {
        const anyUnchecked = checkboxes.some(cb => !cb.checked);
        if (selectAll) selectAll.checked = !anyUnchecked && checkboxes.length > 0;
    }

    if (selectAll) {
        selectAll.addEventListener('change', function() {
            fromSelectAll = true;
            if (this.checked) {
                checkboxes.forEach(cb => {
                    cb.checked = true;
                    cb.dispatchEvent(new Event('change'));
                });
            } else {
                // Keep exactly one selected to avoid empty state and popups
                checkboxes.forEach(cb => cb.checked = false);
                if (checkboxes[0]) {
                    checkboxes[0].checked = true;
                    checkboxes[0].dispatchEvent(new Event('change'));
                }
            }
            fromSelectAll = false;
        });
    }

    checkboxes.forEach(cb => {
        cb.addEventListener('change', function() {
            if (!this.checked) {
                if (selectAll) selectAll.checked = false;
            } else {
                syncSelectAll();
            }

            const checkedCount = checkboxes.filter(x => x.checked).length;
            if (checkedCount === 0 && !fromSelectAll) {
                alert(`At least one option must be selected.`);
                this.checked = true;
                return;
            }

            // Cascading updates
            if (groupKey === 'city') {
                updateColleges();
            } else if (groupKey === 'college_name') {
                updateBranches();
            }
        });
    });

    syncSelectAll();
}

// Helpers to read checked values
function getChecked(groupKey) {
    return Array.from(document.querySelectorAll(`input[name="${groupKey}[]"]:checked`)).map(cb => cb.value);
}

// Dynamic updates (Cities -> Colleges -> Branches), all using the unified renderer
function updateCities() {
    const selectedInstituteTypes = Array.from(document.querySelectorAll('input[name="institute_type"]:checked')).map(cb => cb.value);
    if (selectedInstituteTypes.length === 0) return;

    fetch('/update-cities', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ institute_types: selectedInstituteTypes })
    })
    .then(r => r.json())
    .then(data => {
        const items = (data.cities || []).slice().sort();
        renderGroupOptions('city', items);
        initMultiSelect('city');
        updateColleges();
    })
    .catch(err => console.error('Error updating cities:', err));
}

function updateColleges() {
    const selectedInstituteTypes = Array.from(document.querySelectorAll('input[name="institute_type"]:checked')).map(cb => cb.value);
    const selectedCities = getChecked('city');
    if (selectedInstituteTypes.length === 0 || selectedCities.length === 0) return;

    fetch('/update-colleges', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ institute_types: selectedInstituteTypes, cities: selectedCities })
    })
    .then(r => r.json())
    .then(data => {
        const items = (data.colleges || []).slice();
        renderGroupOptions('college_name', items);
        initMultiSelect('college_name');
        updateBranches();
    })
    .catch(err => console.error('Error updating colleges:', err));
}

function updateBranches() {
    const selectedColleges = getChecked('college_name');
    if (selectedColleges.length === 0) return;

    fetch('/update-branches', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ colleges: selectedColleges })
    })
    .then(r => r.json())
    .then(data => {
        const items = (data.branches || []).slice().sort();
        renderGroupOptions('branch', items);
        initMultiSelect('branch');
    })
    .catch(err => console.error('Error updating branches:', err));
}

// Initial render to normalize markup and behavior for all three groups
// Uses server-provided EJS data to seed consistent UI
const INITIAL = {
    cities: <%- JSON.stringify(cities) %>,
    colleges: <%- JSON.stringify(collegeNames) %>,
    branches: <%- JSON.stringify(branches.map(b => b.branch)) %>
};

document.addEventListener('DOMContentLoaded', function() {
    // Normalize the three dropdowns so they look/behave the same from the start
    renderGroupOptions('city', INITIAL.cities.slice().sort());
    initMultiSelect('city');

    renderGroupOptions('college_name', INITIAL.colleges.slice());
    initMultiSelect('college_name');

    renderGroupOptions('branch', INITIAL.branches.slice().sort());
    initMultiSelect('branch');

    // Institute type changes drive city updates
    document.querySelectorAll('input[name="institute_type"]').forEach(checkbox => {
        checkbox.addEventListener('change', updateCities);
    });

    // Initialize domicile and caste
    handleDomicileChange();

    // Initialize category checkboxes
            updateCategories();
            
            // Set up event listeners for dynamic updates
            document.getElementById('caste').addEventListener('change', updateCategories);
            document.getElementById('class').addEventListener('change', updateCategories);
            document.getElementById('gender').addEventListener('change', updateCategories);
            document.getElementById('domicile').addEventListener('change', updateCategories);

        

            // Attach institute type listeners
            document.querySelectorAll('input[name="institute_type"]').forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    updateCities();
                });
            });

            
        });
        
        // Convert native select.form-select elements into the same rounded dropdown UI used elsewhere
        // This preserves the original <select> (kept hidden) so form submission and existing JS continue to work.
        function convertSelects() {
            const selects = Array.from(document.querySelectorAll('select.form-select')).filter(s => !s.dataset.converted);
            selects.forEach(sel => {
                // mark converted
                sel.dataset.converted = 'true';
                // hide original select but keep in DOM for form submit
                sel.style.position = 'absolute';
                sel.style.left = '-9999px';

                // build wrapper
                const wrapper = document.createElement('div');
                wrapper.className = 'dropdown converted-select-wrapper';

                const btn = document.createElement('button');
                btn.type = 'button';
                btn.className = 'dropdown-btn';

                const labelSpan = document.createElement('span');
                labelSpan.className = 'converted-select-label';

                const icon = document.createElement('i');
                icon.className = 'bx bx-chevron-down';

                btn.appendChild(labelSpan);
                btn.appendChild(icon);

                const content = document.createElement('div');
                content.className = 'dropdown-content';

                function updateBtnLabel() {
                    const opt = sel.options[sel.selectedIndex];
                    labelSpan.textContent = opt ? opt.text : '';
                }

                function rebuildOptions() {
                    content.innerHTML = '';
                    Array.from(sel.options).forEach(opt => {
                        const row = document.createElement('div');
                        row.className = 'dropdown-option';
                        row.textContent = opt.text;
                        row.dataset.value = opt.value;
                        row.addEventListener('click', function(e) {
                            sel.value = opt.value;
                            sel.dispatchEvent(new Event('change', { bubbles: true }));
                            updateBtnLabel();
                            content.classList.remove('show');
                            icon.className = 'bx bx-chevron-down';
                        });
                        content.appendChild(row);
                    });
                }

                // wire interactions
                btn.addEventListener('click', function(e) {
                    e.stopPropagation();
                    content.classList.toggle('show');
                    icon.className = content.classList.contains('show') ? 'bx bx-chevron-up' : 'bx bx-chevron-down';
                });

                document.addEventListener('click', function(e) {
                    if (!wrapper.contains(e.target)) {
                        if (content.classList.contains('show')) {
                            content.classList.remove('show');
                            icon.className = 'bx bx-chevron-down';
                        }
                    }
                });

                // place wrapper into DOM and attach original select inside it (keeps form structure)
                sel.parentNode.insertBefore(wrapper, sel);
                wrapper.appendChild(btn);
                wrapper.appendChild(content);
                wrapper.appendChild(sel);

                // observe option list changes so dynamic updates (like caste) update the UI
                const mo = new MutationObserver(function() {
                    rebuildOptions();
                    updateBtnLabel();
                });
                mo.observe(sel, { childList: true, subtree: true });

                // reflect selection changes
                sel.addEventListener('change', updateBtnLabel);

                // initial build
                rebuildOptions();
                updateBtnLabel();
            });
        }

        // run conversion after initial page setup
        convertSelects();

        // Persist and restore filters using localStorage so "Back to Search" and "Search Again" keep selections
        const FORM_KEY = 'pf_filters_v1';
        function saveFilters() {
            const form = document.querySelector('.form-container');
            const data = {};
            new FormData(form).forEach((v, k) => {
                if (data[k]) {
                    if (Array.isArray(data[k])) data[k].push(v); else data[k] = [data[k], v];
                } else data[k] = v;
            });
            localStorage.setItem(FORM_KEY, JSON.stringify(data));
        }

        function restoreFilters() {
            const raw = localStorage.getItem(FORM_KEY);
            if (!raw) return;
            const data = JSON.parse(raw);
            const form = document.querySelector('.form-container');
            Object.keys(data).forEach(k => {
                const val = data[k];
                const els = form.querySelectorAll(`[name="${k}"]`);
                if (!els || els.length === 0) return;
                if (els[0].type === 'checkbox') {
                    // could be array
                    const arr = Array.isArray(val) ? val : [val];
                    els.forEach(el => {
                        el.checked = arr.indexOf(el.value) !== -1;
                        el.dispatchEvent(new Event('change'));
                    });
                } else if (els[0].tagName === 'SELECT' || els[0].type === 'text' || els[0].type === 'number') {
                    els[0].value = Array.isArray(val) ? val[0] : val;
                    els[0].dispatchEvent(new Event('change'));
                }
            });
        }

        // save on any change
        document.querySelectorAll('.form-container input, .form-container select').forEach(el => {
            el.addEventListener('change', saveFilters);
        });

        // restore at load (if present)
        restoreFilters();

        // Advanced filters toggle - simple direct handler
        (function() {
            const advBtn = document.getElementById('show-advanced-btn');
            const advWrap = document.getElementById('advanced-filters');
            const advToggleContainer = document.getElementById('advanced-filters-toggle');
            function setToggleState(open) {
                if (!advWrap || !advBtn) return;
                if (open) {
                    advWrap.classList.add('show');
                    advWrap.style.display = 'block';
                    advBtn.textContent = 'Hide Advanced Filters';
                    if (advToggleContainer) advToggleContainer.classList.add('show');
                    advWrap.scrollIntoView({ behavior: 'smooth', block: 'start' });
                } else {
                    advWrap.classList.remove('show');
                    advWrap.style.display = 'none';
                    advBtn.textContent = 'Show Advanced Filters';
                    if (advToggleContainer) advToggleContainer.classList.remove('show');
                }
            }

            function toggleAdvanced() {
                const isOpen = advWrap && (advWrap.classList.contains('show') || advWrap.style.display === 'block');
                setToggleState(!isOpen);
            }

            if (advBtn) advBtn.addEventListener('click', function(e) { e.preventDefault(); toggleAdvanced(); });

            // Auto-open if saved advanced filters are present
            try {
                const raw = localStorage.getItem(FORM_KEY);
                if (raw) {
                    const data = JSON.parse(raw);
                    const advancedKeys = ['institute_type', 'city', 'college_name', 'branch'];
                    outer: for (const k of Object.keys(data)) {
                        for (const a of advancedKeys) {
                            if (k.indexOf(a) !== -1) {
                                // ensure panel is visible
                                setToggleState(true);
                                break outer;
                            }
                        }
                    }
                }
            } catch (_) { /* ignore */ }
        })();

        // ensure any time options are replaced programmatically we keep UI in sync
        // e.g., handleDomicileChange and other code replace options — MutationObserver above will handle it
    </script>
</body>
</html>